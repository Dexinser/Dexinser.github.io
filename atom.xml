<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>To die or not to die, this is a question~</title>
  
  <subtitle>不想成为架构师的程序员不是一个好的程序员~</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://indexcode.cn/"/>
  <updated>2019-04-13T07:26:18.751Z</updated>
  <id>https://indexcode.cn/</id>
  
  <author>
    <name>Dexinser</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>The Tipping Point</title>
    <link href="https://indexcode.cn/2018/2018.01.28%20The%20Tipping%20Point.html"/>
    <id>https://indexcode.cn/2018/2018.01.28 The Tipping Point.html</id>
    <published>2019-04-13T07:26:18.751Z</published>
    <updated>2019-04-13T07:26:18.751Z</updated>
    
    <content type="html"><![CDATA[<p><strong> The Tipping Point：</strong> <excerpt in index | 首页摘要></excerpt></p><p>《引爆点》这本书是格拉德威尔在2000年出版的。一经出版就火爆全球，书中介绍的“引爆点”和流行三法则，已经成为当下的商业理论新经典。<br>思考是这本书的主旋律，作者对生活中的一些常见现象，并没有去听从各种专家所说的，不能让人信服的观点，例如：经济学家所说的是由于经济的好转所以就是年代的纽约市犯罪行为的减少；犯罪学家所说的是由于纽约市警察局的警力部署的加强所导致的犯罪行为的减少等等。作者深入思考了这些社会现象之后，认为那些专家所说的理由并不能成为形成这种现象的原因，进而自己来进行寻找和探索，由此而诞生的这本书，进而解读我们社会中的一些流行事件的原因，真的是让我们这些读者打开思想的大门，教给我们各种新奇规律的同时，也教给了我们思考问题的方式和方法。<br>书中的很多著名的专家学者在开篇点评这本书，看完这本书之后重新看这些评语，真是另一种感受：格拉德威尔不愧为2005年《时代》杂志评为世界最有影响力的100人之一，普通人的回答，很少能超出几个大脑早已作出的界定，如：亚当斯密的“看不见的手”、凯恩斯的“调控”、哈耶克的“自发生成秩序”、马克思的辩证唯物主义和历史唯物主义、弗洛伊德的心理分析…而变革者则提出理解世界的新方法：凯恩斯对亚当斯密进行修补；弗洛伊德另辟蹊经；毕加索挑战马蒂斯；爱因斯坦修订牛顿为大自然的“立法”，德鲁克对组织进行研究，提出“知识工人”与受雇阶层的理论。本质上，格拉德威尔与上面提到的为人是一类人，也是一个有新意的变革者。书中开创性的提出了很多名词：流行三法则（个别人物法则[联系员、内行和推销员—保罗·里维尔骑马夜行]、附着力法则[影响事情的主要原因跟我们所想的不一样，往往是很微小的因素所形成的—金盒子广告和打破伤风疫苗、芝麻街和蓝狗线索]、环境威力法则[人们往往会在心里对一个人有一种印象，而往往忽视了环境的不同造成的影响因素；而在事实与我们印象中的不同时我们又会找一个我们自己所能够理解的方式来解释，而保留对一个人印象的唯一性；思维定势中的我们往往又会夸大一些环境因素对我们的影响，例如：家庭因素对我们的影响等等，其实并没有那么大的影响—流言、破窗理论、地铁涂鸦、地铁逃票…]）</p><p>引爆点教给了我们什么道理？就像作者总结的一样总共有三个。</p><h1 id="集中有限的力量，全力以赴。"><a href="#集中有限的力量，全力以赴。" class="headerlink" title="集中有限的力量，全力以赴。"></a>集中有限的力量，全力以赴。</h1><p>我们大多数人做事，一般都是差不多的思维模式，相同的老办法。而往往这种老方法有时候并不是最优的，这种方法可能会包含着太多的浪费我们有限的资源的情况。思维定式之下，我们很难跳出这种限制，而格拉德威尔的这本书中就教给了我们很多方法，去找出事情的引爆点，往往就能付出最小的代价做成很多事情。美国独立战争时期，保罗·里维尔骑马夜行是成功的，但是另一个方向出发的威廉·戴维斯却是失败的，他没有成为历史上有名的人物…取巧之计用在这儿挺合适的，在编程中我们想要成长我们必须要取巧，各种自动化工具的使用，让电脑代替我们去处理重复繁琐的事情；在生活中取巧是我们做事情之前先要想到这件事情成功的引爆点在哪儿，尽量用最少的资源完成事情，不加选择地付出努力并非总是可行的，我们要尽可能的找到到达终点的捷径，以达到事半功倍的效果。</p><h1 id="世界并非是我们一厢情愿的直觉中的世界"><a href="#世界并非是我们一厢情愿的直觉中的世界" class="headerlink" title="世界并非是我们一厢情愿的直觉中的世界"></a>世界并非是我们一厢情愿的直觉中的世界</h1><p>我们总是在杂乱与黑暗之中行事，所以造成了很多的不必要的步骤。我们所认知的范畴限制了我们所看待世界的方式和误解我们所接触到的超出我们理解范围的事情。以抽象方式被表述成形象的社会问题，我们解决起来将会毫无困难。人类思维的特殊之处，在于我们能很好的处理同类之间复杂的关系。我们遇到问题的第一想法是先看一下我们的大脑中有没有储存以前类似的相关问题，类比之前的类似问题来进行处理现在所遇到的问题，但是我们又往往会忽略当下的条件下的不同，或是局限与我们知识储备的不足，处理当下的事情进而使用了错误的方法。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt; The Tipping Point：&lt;/strong&gt; &lt;excerpt in index | 首页摘要&gt;&lt;/excerpt&gt;&lt;/p&gt;
&lt;p&gt;《引爆点》这本书是格拉德威尔在2000年出版的。一经出版就火爆全球，书中介绍的“引爆点”和流行三法则，已经成为当下
      
    
    </summary>
    
      <category term="读书笔记" scheme="https://indexcode.cn/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="认知提升" scheme="https://indexcode.cn/tags/%E8%AE%A4%E7%9F%A5%E6%8F%90%E5%8D%87/"/>
    
  </entry>
  
  <entry>
    <title>磁盘格式</title>
    <link href="https://indexcode.cn/2018/2018.01.21%20%E7%A3%81%E7%9B%98%E6%A0%BC%E5%BC%8F.html"/>
    <id>https://indexcode.cn/2018/2018.01.21 磁盘格式.html</id>
    <published>2019-04-13T07:26:18.749Z</published>
    <updated>2019-04-13T07:26:18.750Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 磁盘格式：</strong> <excerpt in index | 首页摘要></excerpt></p><p>好久没更博客了，虽然没什么人看，但是作为练习自己写作能力的锻炼和提升，也不能荒废我的博客更新哈~<br>说一下我最近的个人动态吧~ 现在学校放假有两个星期了，学校一放假就跑到实习公司来实习了，一进公司报到当天就给我配置了2015年的mac pro顶配版，不得不说真是开心哈~而且是2017年产的新开封的哦~不要羡慕哦~哈哈哈，你们以后工作也会有的。然后新进公司第一周就一直在熟悉mac本的一些基础操作，没办法，谁让我没用过这种高大上的苹果笔记本呢。我是刚把Windows系统的笔记本用到稍微熟练一点儿，就让我接触mac真是有点儿不熟悉呢，不过经过一周的操作训练，越来越觉的mac的人性化，怪不得办公的大公司的白领啦、管理者啦、领导啦什么的，都喜欢用苹果本办公呢，真的比Windows好用多了，当然了，这只是我个人的一些浅显小想法，大家不同意就当我没说，我的人生阅历还是很少，不能确定说的对哈~</p><p>好了，接下来就来说一下写这篇博客的由来吧~换上了mac本之后，看到了mac自带的时间机器，感觉好高大上啊，可以自动保存快照，想什么时候回退到哪儿都行，真是太强大的一个功能了。虽然这个说是不占用mac上剩余的内存，不过我还是担心影响我的笔记本日常所使用的性能，万一影响我的使用体验都不好，在说了我也有一个自己的硬盘，为什么不用我自己的硬盘当作是Time Machien的保存磁盘呢；想到就去做了，第二天就把我的磁盘带过来了，兴致勃勃的插上去却让我失望了，居然是只能读的权限，然后我才知道Windows下的保存文件格式与mac下的保存文件格式是不同的。啊啊啊，要想用做mac的时间机器的御用磁盘必须先把磁盘数据全部格式化了，但是我的磁盘上还有好多我都珍贵的资源呢，怎么能删除掉呢，所以只能先把数据保存到其他的地方，到时候把磁盘的格式改回来在存进去。然后就又把磁盘带回去了，把数据拷贝到了我的Windows电脑上，然后在mac上把磁盘格式化了，终于能用作备份磁盘了，真是好不容易啊。但是这样的话又变成了磁盘只能在mac上用了，所以我索性把我的1T硬盘，分成3个区，一个单独的用作mac数据备份区，另两个一个用作Windows存放数据区，另一个用作mac存放数据区。这样总算大功告成了吧，谁知道原来我把Windows上使用的存放数据格式给改成了Fat32格式的，不是我想要的NTFS格式的，但是这个时候我已经把原先的数据都已经导回来了，实在不想再折腾了，啊啊啊，好伤心啊！接下来就让我介绍一下他俩的区别吧~</p><h1 id="FAT32与NTFS的区别"><a href="#FAT32与NTFS的区别" class="headerlink" title="FAT32与NTFS的区别"></a>FAT32与NTFS的区别</h1><p>在推出FAT32文件系统之前，通常PC机使用的文件系统是FAT16。像基于MS-DOS，Win 95等系统都采用了FAT16文件系统。在Win 9X下，FAT16支持的分区最大为2GB。我们知道计算机将信息保存在硬盘上称为“簇”的区域内。使用的簇越小，保存信息的效率就越高。在FAT16的情况下，分区越大簇就相应的要增大，存储效率就越低，势必造成存储空间的浪费。并且随着计算机硬件和应用的不断提高，FAT16文件系统已不能很好地适应系统的要求。在这种情况下，推出了增强的文件系统FAT32。同FAT16相比，FAT32主要具有以下特点：</p><ol><li>同FAT16相比FAT32最大的优点是可以支持的磁盘大小达到2TB（2047GB），但是不能支持小于512MB的分区。基于FAT32的Win 2000可以支持分区最大为32GB；而基于 FAT16的Win 2000支持的分区最大为4GB。</li><li>由于采用了更小的簇，FAT32文件系统可以更有效率地保存信息。如两个分区大小都为2GB，一个分区采用了FAT16文件系统，另一个分区采用了FAT32文件系统。采用FAT16的分区的簇大小为32KB，而FAT32分区的簇只有4KB的大小。这样FAT32就比FAT16的存储效率要高很多，通常情况下可以提高15%。</li><li>FAT32文件系统可以重新定位根目录和使用FAT的备份副本。另外FAT32分区的启动记录被包含在一个含有关键数据的结构中，减少了计算机系统崩溃的可能性。<br>NTFS文件系统<br>NTFS文件系统是一个基于安全性的文件系统，是Windows NT所采用的独特的文件系统结构，它是建立在保护文件和目录数据基础上，同时照顾节省存储资源、减少磁盘占用量的一种先进的文件系统。使用非常广泛的Windows NT 4.0采用的就是NTFS 4.0文件系统，相信它所带来的强大的系统安全性一定给广大用户留下了深刻的印象。Win 2000采用了更新版本的NTFS文件系统??NTFS 5.0，它的推出使得用户不但可以像Win 9X那样方便快捷地操作和管理计算机，同时也可享受到NTFS所带来的系统安全性。<br>NTFS 5.0的特点主要体现在以下几个方面：</li><li>NTFS可以支持的分区(如果采用动态磁盘则称为卷)大小可以达到2TB。而Win 2000中的FAT32支持分区的大小最大为32GB。</li><li>NTFS是一个可恢复的文件系统。在NTFS分区上用户很少需要运行磁盘修复程序。NTFS通过使用标准的事物处理日志和恢复技术来保证分区的一致性。发生系统失败事件时，NTFS使用日志文件和检查点信息自动恢复文件系统的一致性。</li><li>NTFS支持对分区、文件夹和文件的压缩。任何基于Windows的应用程序对NTFS分区上的压缩文件进行读写时不需要事先由其他程序进行解压缩，当对文件进行读取时,文件将自动进行解压缩；文件关闭或保存时会自动对文件进行压缩。</li><li>NTFS采用了更小的簇,可以更有效率地管理磁盘空间。在Win 2000的FAT32文件系统的情况下,分区大小在2GB～8GB时簇的大小为4KB；分区大小在8GB～16GB时簇的大小为8KB；分区大小在16GB～32GB时,簇的大小则达到了16KB。而Win 2000的NTFS文件系统，当分区的大小在2GB以下时,簇的大小都比相应的FAT32簇小;当分区的大小在2GB以上时(2GB～2TB),簇的大小都为4KB。相比之下，NTFS可以比FAT32更有效地管理磁盘空间，最大限度地避免了磁盘空间的浪费。</li><li>在NTFS分区上,可以为共享资源、文件夹以及文件设置访问许可权限。许可的设置包括两方面的内容：一是允许哪些组或用户对文件夹、文件和共享资源进行访问；二是获得访问许可的组或用户可以进行什么级别的访问。访问许可权限的设置不但适用于本地计算机的用户,同样也应用于通过网络的共享文件夹对文件进行访问的网络用户。与FAT32文件系统下对文件夹或文件进行访问相比，安全性要高得多。另外,在采用NTFS格式的Win 2000中,应用审核策略可以对文件夹、文件以及活动目录对象进行审核，审核结果记录在安全日志中，通过安全日志就可以查看哪些组或用户对文件夹、文件或活动目录对象进行了什么级别的操作，从而发现系统可能面临的非法访问,通过采取相应的措施，将这种安全隐患减到最低。这些在FAT32文件系统下,是不能实现的。</li><li>在Win 2000的NTFS文件系统下可以进行磁盘配额管理。磁盘配额就是管理员可以为用户所能使用的磁盘空间进行配额限制，每一用户只能使用最大配额范围内的磁盘空间。设置磁盘配额后，可以对每一个用户的磁盘使用情况进行跟踪和控制，通过监测可以标识出超过配额报警阈值和配额限制的用户，从而采取相应的措施。磁盘配额管理功能的提供，使得管理员可以方便合理地为用户分配存储资源，避免由于磁盘空间使用的失控可能造成的系统崩溃，提高了系统的安全性。</li><li>NTFS使用一个“变更”日志来跟踪记录文件所发生的变更。</li></ol><h1 id="小提示-选取FAT32和NTFS的建议"><a href="#小提示-选取FAT32和NTFS的建议" class="headerlink" title="小提示(选取FAT32和NTFS的建议)"></a>小提示(选取FAT32和NTFS的建议)</h1><p>在系统的安全性方面，NTFS文件系统具有很多FAT32文件系统所不具备的特点，而且基于NTFS的Win 2000运行要快于基于FAT32的Win 2000；而在与Win 9X的兼容性方面，FAT32优于NTFS。所以在决定Win 2000中采用什么样的文件系统时应从以下几点出发：</p><ol><li>计算机是单一的Win 2000系统，还是采用多启动的Win 2000系统；</li><li>本地安装的磁盘的个数和容量；</li><li>是否有安全性方面的考虑等。<br>基于以上的考虑，如果要在Win 2000中使用大于32GB的分区的话，那么只能选择NTFS格式。如果计算机作为单机使用，不需要考虑安全性方面的问题，更多地注重与Win 9X的兼容性，那么FAT32是最好的选择。如果计算机作为网络工作站或更多的追求系统的安全性，而且可以在单一的Win 2000模式下运行，强烈建议所有的分区都采用NTFS格式；如果要兼容以前的应用，需要安装Win 9X或其它的操作系统，建议做成多启动系统，这就需要两个以上的分区，一个分区采用NTFS格式，另外的分区采用FAT32格式，同时为了获得最快的运行速度建议将Win 2000的系统文件放置在NTFS分区上，其它的个人文件则放置在FAT32分区中。<br>回答字数10000字以内<br>参考资料：<br>如果您的回答是从其他地方引用，请表明出处。</li></ol><hr><h1 id="FAT分区与NTFS分区有什么区别？"><a href="#FAT分区与NTFS分区有什么区别？" class="headerlink" title="FAT分区与NTFS分区有什么区别？"></a>FAT分区与NTFS分区有什么区别？</h1><h2 id="NTFS"><a href="#NTFS" class="headerlink" title="NTFS"></a>NTFS</h2><p>在选择 NTFS 时可以使用的功能有：<br>Active Directory，可用来方便地查看和控制网络资源。<br>域，它是 Active Directory 的一部分，在简化管理的同时，依然可以使用域来调整安全选项。域控制器需要 NTFS 文件系统。<br>文件加密，它极大地增强了安全性。<br>可以对单个文件设置权限，而不仅仅是对文件夹进行设置。<br>稀疏文件，这些是由应用程序创建的非常大的文件，以这种方式创建的文件只受磁盘空间的限制。也就是，NTFS 只为写入的文件部分分配磁盘空间。<br>远程存储，通过使可移动媒体（如磁带）更易访问，从而扩展了硬盘空间。<br>磁盘活动恢复记录，可帮助您在断电或发生其他系统问题时，尽快地还原信息。<br>磁盘配额，可用来监视和控制单个用户使用的磁盘空间量。<br>可更好地支持大驱动器，NTFS 支持的最大驱动容量比 FAT 支持的容量大得多，但随着驱动器容量得增大，NTFS 的性能并不随之降低，而 FAT 的性能却急速下降。<br>这只是最新版 NTFS 的部分功能列表。有关新功能的详细信息，请参阅 Windows 2000 Advanced Server 的新特性。<br>安装程序可以方便地将分区转换为新版的 NTFS，即使该分区以前使用的是 FAT 或 FAT32 文件系统，这种转换可保持文件的完整性（与格式化分区不同）。安装程序通过从检查现有的文件系统开始运行。如果文件系统是 NTFS，转换会自动发生。如果是 FAT 或 FAT32，安装程序可让您选择是否要将它们转换为 NTFS。如果不想保留文件，且有一个 FAT 或 FAT32 分区，建议使用 NTFS 格式化该分区，而不是转换 FAT 或 FAT32 文件系统。格式化分区会删除该分区上所有的数据，但使用 NTFS 格式化的分区与从 FAT 或 FAT32 转换来的分区相比，磁盘碎片较少，且性能更快。<br>但是使用 NTFS 依然有缺点，不论该分区是用 NTFS 格式化还是从以前的文件系统转换而来。在安装完成之后，也可以使用 Convert.exe 转换分区的文件系统。有关 Convert.exe 的详细信息，在结束安装之后，单击“开始”，再单击“运行”，键入 cmd 并按回车键键即可查阅它的信息。在命令窗口，键入 help convert，然后按回车键。FAT 和 FAT32<br>FAT 和 FAT32 是可选的文件系统选项。如果必须将计算机安装为有时使用以前的操作系统（有时使用 Windows 2000），则将要使用这些文件系统。其他信息，请参阅：<br>决定计算机是否包含多个操作系统<br>多个操作系统和文件系统的兼容性<br>包含 Windows NT 4.0 和 Windows 2000 Advanced Server 的计算机<br>在 NTFS、FAT 和 FAT32 间选择<br>有关 FAT 和 FAT32 之间区别的详细信息，请参阅在 NTFS、FAT 和 FAT32 间选择中的表格。如果要在 FAT 和 FAT32 之间做出选择，基本的标准是安装分区的大小。如果分区容量是 2 GB 或更大，应使用 FAT32 而不是 FAT 分区。<br>注意<br>Windows 2000 支持任意大小的由 Windows 95 或 Windows 98 创建的 AT32 卷。但是，Windows 2000 格式化的 FAT32 卷最大容量只能达到 32 GB。NTFS 是更好的选择，可应用在容量大于 32 GB 的卷上。<br>如果在安装过程中，选择使用 FAT 格式化分区，且该分区大于 2 GB，那么安装程序会自动用 FAT32 文件系统格式化。<br>在 NTFS、FAT 和 FAT32 间选择<br>可以为 Windows 2000 Advanced Server 计算机的磁盘分区选择下列之一的文件系统：NTFS、FAT 和 FAT32。NTFS 是推荐的文件系统。FAT 和 FAT32 彼此相似，但与 FAT 相比，FAT32 可用在容量较大的磁盘上。（最容易使用大磁盘的文件系统是 NTFS。）本节介绍的信息可帮助您比较这些文件系统，有关每种文件系统的其他信息，请参阅：<br>NTFS</p><p>##FAT 和 FAT32<br>NTFS 与 FAT 和 FAT32 相比，它是最强大的文件系统。Windows 2000 Advanced Server 包括新版本的 NTFS，它支持各种新功能（包括 Active Directory），而域、用户帐户和其他重要的安全特性都需要 Active Directory 功能。<br>安装程序可以方便地将分区转换为新版的 NTFS，即使该分区以前使用的是 FAT 或 FAT32 文件系统，这种转换可保持文件的完整性（与格式化分区不同）。如果不想保留文件，且有一个 FAT 或 FAT32 分区，建议使用 NTFS 格式化该分区，而不是转换 FAT 或 FAT32 文件系统。格式化分区会删除该分区上所有的数据，但使用 NTFS 格式化的分区与从 FAT 或 FAT32 转换来的分区相比，磁盘碎片较少，且性能更快。<br>但是使用 NTFS 依然有缺点，不论该分区是用 NTFS 格式化还是从以前的文件系统转换而来。在安装完成之后，也可以使用 Convert.exe 转换分区的文件系统。有关 Convert.exe 的详细信息，在结束安装之后，单击“开始”，再单击“运行”，键入 cmd 并按回车键即可查阅它的信息。在命令窗口，键入 help convert，然后按回车键。<br>注意<br>只有通过选择 NTFS 作为您的文件系统，才能使用诸如 Active Directory 和基于域的安全性等重要功能。<br>有一种情况可能需要将 FAT 或 FAT32 选为您的文件系统。如果需要让计算机有时运行早期的操作系统，有时运行 Windows 2000，则需要将 FAT 或 FAT32 分区作为硬盘上的主（或启动）分区。这是因为早期的操作系统（只有一个例外），都无法访问使用最新版 NTFS 格式化的分区。例外是带有 Service Pack 4 或更高版本的 Windows NT 4.0，它可以访问使用最新版 NTFS 格式化的分区，但也有一些限制。Windows NT 4.0 无法访问那些用在 Windows NT 4.0 发布时，还没出现的 NTFS 功能存储的文件。详细信息，请参阅：<br>决定计算机是否包含多个操作系统<br>多个操作系统和文件系统的兼容性<br>但对于其他包含多个操作系统的情况，推荐的文件系统依然是 NTFS。<br>下面的表格介绍了每个文件系统与各种操作系统的兼容性。<br>NTFS FAT FAT32<br>运行 Windows 2000 的计算机可以访问 NTFS 分区上的文件。运行带有 Service Pack 4 或更高版本的 Windows NT 4.0计算机可能可以访问某些文件。其他操作系统则无法访问。 可以通过 MS-DOS、所有版本的 Windows、 Windows NT、 Windows 2000 和 OS/2 访问。 只能通过 Windows 95 OSR2、Windows 98 和 Windows 2000 访问。<br>下表比较了每个文件系统支持的磁盘和文件大小。<br>NTFS FAT FAT32<br>推荐最小的容量为 10 MB，<br>推荐实际最大的容量为 2 TB，并可支持更大的容量。<br>无法用在软盘上。<br>容量可从软盘大小到最大 4 GB。<br>不支持域。<br>容量从 512 MB 到 2 TB。<br>在 Windows 2000 中，可以格式化一个不超过 32 GB 的 FAT32 卷。<br>不支持域。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt; 磁盘格式：&lt;/strong&gt; &lt;excerpt in index | 首页摘要&gt;&lt;/excerpt&gt;&lt;/p&gt;
&lt;p&gt;好久没更博客了，虽然没什么人看，但是作为练习自己写作能力的锻炼和提升，也不能荒废我的博客更新哈~&lt;br&gt;说一下我最近的个人动态吧~ 现在学校
      
    
    </summary>
    
      <category term="资源分享" scheme="https://indexcode.cn/categories/%E8%B5%84%E6%BA%90%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="认知提升" scheme="https://indexcode.cn/tags/%E8%AE%A4%E7%9F%A5%E6%8F%90%E5%8D%87/"/>
    
  </entry>
  
  <entry>
    <title>Amour-影评</title>
    <link href="https://indexcode.cn/2017/12/2017.12.08%20Amour.html"/>
    <id>https://indexcode.cn/2017/12/2017.12.08 Amour.html</id>
    <published>2019-04-13T07:26:18.748Z</published>
    <updated>2019-04-13T07:26:18.748Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Amour-影评</strong>   <excerpt in index | 首页摘要><br>我今年23岁，在我的这有限的人生阅历中，只经历过一次亲人的离世–我的姥爷。昨天看完了法国2012年上映的电影《Amour》，让我有很大的感触，也让我回想起了我的姥爷。人生生老病死本是常态，但是当一个人慢慢变老，而由变老带来的一系列问题真的是很让人无奈又不甘心的吧！与天斗，与地斗，与人斗，最后变成了与自己斗！<br>影片中的两位主人公都是已经退休的80多岁的音乐老师，本来在安享晚年的时候，却横遭变故，女主角Anne毫无征兆的突然中风，而后右半身偏瘫，直至最后的卧床不起..而后是男主角Georges照顾Anne的一系列平常的事情，但是也正是在平常的生活中才能见证两个人的感情..以及各自的心理变化，到最后男主的妥协..<br>这部电影讲的太过于真实，以至于直敲心灵深处。看完这部电影就像影片中男主角说他小时候看过的电影一样，看的过程中很触动感情，看完之后再回想的时候更是一发不可收拾。昨天晚上看完这部电影，今天早上再回想起来的时候眼泪更是止不住的留下来，真的跟男主角说的一样..难道这也是导演做的对这部电影的铺垫吗？<br>这部电影从头到尾都是平铺直叙式的拍摄方式，背景音乐也只是再特定的时候才用到了钢琴曲，我不敢去看第二遍了，所以这是我大概的记忆，不知道对不对。没有生活中的大起大落，只是平常生活中的平平淡淡的像极了平常人的老年生活，但是也正是这样，才直指人内心深处的感触，才能激起泪腺啊！才让我对爱有了更为真实的定义。</excerpt></p><h1 id="女主角的心理历程"><a href="#女主角的心理历程" class="headerlink" title="女主角的心理历程"></a>女主角的心理历程</h1><p>从一开始的病情征兆的出现，女主角对自己的病情很害怕，因为是80对岁的人了，做手术风险很高，对一般人来说几乎没什么风险的手术，都年纪很大的女主角来说风险很高了。影片中男主角也说到了做手术的风险很低，但是不巧的是女主角正好是那风险很低的5%的一部分里。做完手术后身体半瘫，从刚开始的难以接受，自尊心受到了极大的打击，乃至于男主角有一天去参加一个朋友的葬礼，提前回来之后发现女主角倒在开着的窗台下面，男主角没有问为什么会发生这样的事，他应该也能猜到Anne的想法，觉得自己是一个累赘，不如一死了之。再到Anne看相册时说的一句话：人生真是太过漫长了。听到这儿，Georges不知该说什么，明白了Anne的心思。</p><p>片中的一幕死亡引起了不少观众的非议，这不禁让我想起“安乐死”的议题。笔者所在的荷兰是最早通过“安乐死”的国家，“安乐死”其实是对生者权利和意愿的尊重。电影中的这一幕，有区别，却也有类同。许多观众无法对片中展示的价值观进行认同，其实我看《Amour》的时候，当乔治拿起枕头时，也先是吃惊，不解，随后心中却升起无尽的悲凉。电影中的细节已经无数次提醒观众：Anne去意已决，当George回家看到Anne跌坐在窗口，Anne已有了跳楼离世之心；当Anne翻起相册时，她不是已经说过，人生之于她，已经太过于漫长了么？当她彻夜喊着“痛”，喊着“妈妈”时，她难道不是已经无法再忍受下去了么？当George给Anne喂汤时，她莫非不也是无法接受最后的怜悯了么？巴掌打在Anne的脸上，却也重重打在了George的心上，这样下去的苟延残喘，只会带来互相伤害，保姆已经用梳头和镜子彻底摧毁了Anne仅剩的一点点自尊心，他又能带给她什么呢？</p><p>于是我泪流满面，明白了George的用意，与其让爱人痛苦着死去，不如让她快乐地活在他心里。一辈子的相濡以沫，又怎么会不懂得爱人的心意呢？那些只看到“谋杀”的观众，恐怕涉世未深，对“爱”无法理解吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;Amour-影评&lt;/strong&gt;   &lt;excerpt in index | 首页摘要&gt;&lt;br&gt;我今年23岁，在我的这有限的人生阅历中，只经历过一次亲人的离世–我的姥爷。昨天看完了法国2012年上映的电影《Amour》，让我有很大的感触，也让我回想起了我的
      
    
    </summary>
    
      <category term="个人分享" scheme="https://indexcode.cn/categories/%E4%B8%AA%E4%BA%BA%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="影评" scheme="https://indexcode.cn/tags/%E5%BD%B1%E8%AF%84/"/>
    
  </entry>
  
  <entry>
    <title>Js中一些相似方法/属性的区别</title>
    <link href="https://indexcode.cn/2017/12/2017.12.05%20js%E4%B8%AD%E4%B8%80%E4%BA%9B%E6%96%B9%E6%B3%95%E7%9A%84%E6%AF%94%E8%BE%83%E4%B8%8E%E5%8C%BA%E5%88%AB.html"/>
    <id>https://indexcode.cn/2017/12/2017.12.05 js中一些方法的比较与区别.html</id>
    <published>2019-04-13T07:26:18.746Z</published>
    <updated>2019-04-13T07:26:18.746Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Js中一些相似方法/属性的区别</strong>   <excerpt in index | 首页摘要></excerpt></p><h1 id="forEach-与-map-方法比较"><a href="#forEach-与-map-方法比较" class="headerlink" title="forEach 与 map 方法比较"></a>forEach 与 map 方法比较</h1><p>forEach()和map()两个方法都是ECMA5中Array引进的新方法，主要作用是对数组的每个元素都执行一次所提供的函数，但是它们之间还是有区别的。jQuery也有一个方法$.each(),长得和forEach()有点像，功能也类似。但是从本质上还是有很大的区别的。</p><p>`//forEach<br>array.forEach(callback(currentValue, index, array){<br>    //do something<br>}, this)</p><p>//或者<br>array.forEach(callback(currentValue, index, array){<br>    //do something<br>})　　</p><p>//map:<br>var new_array = arr.map(callback[, thisArg])　</p><p>//$.each()<br>$(selector).each(function(index,element))  //注意参数的顺序`</p><p>callback: 为数组中每个元素执行的函数,该函数接收三个参数，</p><p><strong>参数一：当前数组中元素；参数二：索引； 参数三：当前数组。</strong></p><p><strong>this：可选，执行会掉时候，this的指向。</strong></p><hr><p>区别：</p><ol><li><p>forEach()返回值是undefined，不可以链式调用。</p></li><li><p>map()返回一个新数组，原数组不会改变。</p></li><li><p>没有办法终止或者跳出forEach()循环，除非抛出异常，所以想执行一个数组是否满足什么条件，返回布尔值，可以用一般的for循环实现，或者用Array.every()或者Array.some();</p></li><li><p>$.each()方法规定为每个匹配元素规定运行的函数，可以返回 false 可用于及早停止循环。</p></li></ol><hr><p>Array 在 Javascript 中是一个对象， Array 的索引是属性名。<br>事实上， Javascript 中的 “array” 有些误导性， Javascript 中的 Array 并不像大部分其他语言的数组。首先， Javascript 中的 Array 在内存上并不连续，其次， Array 的索引并不是指偏移量。<br>实际上， Array 的索引也不是 Number 类型，而是 String 类型的。我们可以正确使用如 arr[0] 的写法的原因是语言可以自动将 Number 类型的 0 转换成 String 类型的 “0” 。<br>所以，在 Javascript 中从来就没有 Array 的索引，而只有类似 “0” 、 “1” 等等的属性。有趣的是，每个 Array 对象都有一个 length 的属性，导致其表现地更像其他语言的数组。<br>但为什么在遍历 Array 对象的时候没有输出 length 这一条属性呢？那是因为 for-in 只能遍历“可枚举的属性”， length 属于不可枚举属性，实际上， Array 对象还有许多其他不可枚举的属性。</p><p>map可以做链式操作，forEach不可以，<br>for不用担心兼容性的问题，还有可以break跳出循环，是基础循环，可以有for…in,foo…of,for(let i=0;i&lt;len;i++)等。可以用continue和break控制<br>forEach是for(let i=0;i&lt;len;i++)的缩写，不支持continue和break，可以return来控制循环，forEach是不能退出循环本身的<br>map循环当前可循环对象，并且返回新的可循环对象，而forEach没有返回值<br>forEach只有在火狐和谷歌浏览器中Array有这个方法，在IE中就米有，需要用prototype手动添加这个方法。</p><h1 id="类数组与数组的区别"><a href="#类数组与数组的区别" class="headerlink" title="类数组与数组的区别"></a>类数组与数组的区别</h1><p>类数组对象：<br>console.log(typeof a);//object 注意：数组也是对象哦<br>console.log(a); //  Object {0: 0, 1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64, 9: 81} 很明显对象啊<br>console.log(a.length); //undefined  区别就在这了  类数组对象没有长度的属性和数组的方法<br>console.log(Object.prototype.toString.call(a));//[object Object]<br>数组对象：<br>console.log(typeof b);//object<br>console.log(b);//  [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]  很明显数组啊<br>console.log(b.length); //8<br>console.log(Object.prototype.toString.call(b));//[object Array]</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;Js中一些相似方法/属性的区别&lt;/strong&gt;   &lt;excerpt in index | 首页摘要&gt;&lt;/excerpt&gt;&lt;/p&gt;
&lt;h1 id=&quot;forEach-与-map-方法比较&quot;&gt;&lt;a href=&quot;#forEach-与-map-方法比较&quot; clas
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://indexcode.cn/categories/JavaScript/"/>
    
    
      <category term="学习笔记" scheme="https://indexcode.cn/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>狩猎-影评</title>
    <link href="https://indexcode.cn/2017/12/2017.12.04%20%E7%8B%A9%E7%8C%8E-%E5%BD%B1%E8%AF%84.html"/>
    <id>https://indexcode.cn/2017/12/2017.12.04 狩猎-影评.html</id>
    <published>2019-04-13T07:26:18.745Z</published>
    <updated>2019-04-13T07:26:18.745Z</updated>
    
    <content type="html"><![CDATA[<p><strong>狩猎-影评</strong>   <excerpt in index | 首页摘要><br>好几天没更博了，想着总要写点儿什么，锻炼一下我的写作能力，嘿嘿嘿~<br>不得不说的是，这几天我过的很爽哈，一下看了好几天的电影，都是名气很高的电影，看完电影之后就想着写一下影评抒发一下我的看法~不过自己的文笔不太好，所以就转载一篇吧~</excerpt></p><p>看完了《狩猎》，这是一部丹麦的电影；导演托马斯·温特伯格，曾是丹麦电影学院有史以来最年轻的入学学生，而且表现出色。</p><p>影片最让我动容的是对人性的刻画。好了，就让我转载一个我所认同的影评吧~ <a href="https://movie.douban.com/review/5818670/">原文地址</a></p><p>一部寒冷彻骨的电影。不温不火的叙事和冷静理智镜头之中酝酿了近乎绝望的压抑、狂躁与寒冷，这部丹麦电影就像北欧的冬天一样寒冷，在颤栗中毫不留情的在人性与社会道德划上深入骨头的一刀。</p><p>这部电影的观影过程绝对不是一个愉快的过程，片中酝酿的一种冷而近乎绝望的氛围让整部电影张力饱满，郁结到近乎暴戾的怨气充斥胸腔，让人意志中的理智与情感大乱阵脚，剧情爆炸式的张力让整部电影的氛围处在一种极其微妙、一触即发的精确位置，而这种微妙张力来源于人内心之间的斗争。所谓三人成虎，但这部电影不仅仅是一个三人成虎的故事，儿童在影片中游离于天使与恶魔之间的设置，让这个三人成虎的故事变得更加深刻和让人不寒而栗，西方国家对儿童的保护和重视也在此片中可见一斑，孩子的话往往是纯真而无意的，但是这种无意的“孩子话”要是沾上社会道德禁区，并被误解，那纯真便可以变成剧毒的毒药，很遗憾，影片中的主人公就是一个不幸中毒的倒霉蛋，孩子自然可以不为自己的话负责，短浅的人生阅历让他们在社会的地位中一无所有，而对于一个成年人来说，社会中的一席之地近乎可以是他们的全部，当这些被毁灭时，就意味着个人的社会性被抹掉，对于一个有理智成年人来说，这是一种变相的谋杀。片中男主角的反应似乎略显迟钝，自我维护也是到了最后才迸发，可是细心的可以发现，在铺垫段落，男主角与孩子的互动之中，与女朋友的交往之中，我看到了男主角身上隐隐约约的被动性格，这种人，往往木讷而善良。</p><p>孩子算社会中的特殊的弱势群体，他们在生理和心理上都不成熟，保护自我的能力薄弱，所以一旦发生疑似侵犯儿童的事，社会群体总是会毫无保留的站在孩子的这一端而群起攻之，但是当这种社会性的毫无保留被曲解和误用的时候，孩子就由天使变成了魔鬼，孩子尚未健全的人格和辨识力让社会常规、合理的解决途径在此无路可通，于是他们的话往往带来巨大的破坏性，影片中卢卡斯的生活就被一两句近似胡话的童呓毁灭，但毁灭过程最大的破坏力并不是由孩子直接带来的，而是由社会群体的排斥和异化所带来的，人毕竟还是群居动物，当一个人被孤立和异化的时候，这种隔阂带来的对人的伤害是巨大的，更何况这种排斥和有意的异化是冤屈的，影片的张力便是建立在这种排斥和冤屈的对立上，精准到位的把这种恶毒的人际对立和人物内心的崩塌完美的展现了出来。谣言猛于虎，而当社会伦理禁区的谣言来自天真的孩子，这种破坏力则更加猛烈，影片中，在丑闻和随之而来的各种谣言面前，社会群体之间的对立逐渐变得立体而猛烈，从开始的将信将疑留有余地，到最后近乎整个社会群体的排斥，影片在似乎平静的氛围中酝酿下了更大的恶意，当观众以男主角为第一人称带入故事时，这种慢慢酝酿而来的恶意和仇恨近乎可以演化成反社会的暴戾情绪，一股积郁的愤怒迟迟无法爆炸最终竟成了彻骨的寒意。</p><p>影片的前半个小时感觉有点云里雾里不知所云，切入过慢，但是一过这个节点，影片便开始展开其爆炸性的张力，导演对镜头的处理平静而理智，就像影片中主人公开始对自己理智的克制一样，但是到了后半段，主人公的理智开始摇晃时，影片的镜头仍然平静如初，这种镜头内的躁动和镜头外的平静理智，让观众产生一种由内及外的愤怒，甚至萌生反社会的暴戾情绪，正是因为镜头冷峻的袖手旁观与故事内的爆炸张力产生的强烈对比，为主人公鸣不平却无可奈何而产生的强烈观影共鸣，带来了极大的带入感和精准的人物塑造。本片的导演托马斯•温特伯格轻松的把观众的情绪玩弄于鼓掌之中，这正是这位丹麦导演的功力所在。这种沉重的社会题材电影往往可以给人带来更多的思考，不论是去年的《爱》还是以往的更多欧洲社会题材电影。影片最让我印象深刻的是在教堂的一幕，男主角非常讽刺来到教堂这个乞求救赎的地方，顶着上帝普世之爱的光环这或许是唯一能让他这个“罪人”和一社区“善人”平静共处一室的地方，当孩子们用天使般的声音开始唱圣诞颂歌时，这种恶与纯真的巨大反差让男主角的理智处于崩溃边缘，但是终究理智还是没有崩溃，这种人社会性的属性永远也抹不去，不然他会去绕过卡拉的爸爸，直接对孩子下手，理智告诉卢卡斯孩子是无辜的，卢卡斯只能找卡拉的爸爸出气，我想这是终究个错误的判断，因为最后的一幕非常明确的说明了，这整个闹剧最大的罪魁祸首，并不是卡拉，也不是卡拉做出错误判断的父亲，而是卢卡斯所处的这整个社会的偏见，影片结尾成人仪式非常值得玩味，猎枪的承接和周遭暧昧不清的笑容让人寒颤，成年意味着力量和责任，而也意味着代价，社会族群可以这样接纳你，给予你一定的位置，也可以迅速的像对卢卡斯那般，残忍的把你除名。电影最后那意味深长的一枪是谁开的其实并不重要，它最大的价值便是打醒那些做梦的人，而背后的开枪者，只是一个模糊的轮廓，导演的意图很明确，这个轮廓是为所有人设计的。</p><p>“狩猎”这个片名有一定的意味，显然卢卡斯就是社会群体森林中那只被追猎的麋鹿，毫无防备，甚至心怀感激的袒露在黑暗森林之中，无数躲在暗中的猎人可以中伤他，而最后那惊人心魄的一枪，既可以视为恶意的中伤，也可视为善意的警告，但想要表达的暗示都是同一点：走吧，这片森林再也不欢迎你了。这种无意引起的社会群体对个人的排斥，让人看清社会的部分阴暗面貌，深刻见底，暂时不提娈童的恶，说说群体性的排斥，在浩荡历史上，这种多数人对少数人偏见和迫害又能少到哪去？从异教徒到同性恋，从布鲁诺到图灵，这种恶毒的幽灵一直活着，至今伊朗仍对同性恋处予恶毒的石刑，别以为它们离我们很远很远，即使到了今天，它仍然活生生在我们周围匍匐着，无法忽略卡拉作为导火索在事件中起的恶劣作用，但是最可恶的并不是孩子，而是那群虚伪的，带有偏见的，先入为主的，自封卫道士的傲慢大人们，要知道无知并不是文明最大的障碍，傲慢才是。影片的所谓的刻意其实并不过分，这种滑稽天方夜谭似的连锁事件时刻在我们所处的世界上演，如果你细心留意。感谢最后的一枪把我所有的幻想和美好愿景都打了个粉碎。心中郁结已久的戾气最后居然被这突然而来的枪声惊吓冻结成了冰块，一股彻骨的寒意弥漫全身。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;狩猎-影评&lt;/strong&gt;   &lt;excerpt in index | 首页摘要&gt;&lt;br&gt;好几天没更博了，想着总要写点儿什么，锻炼一下我的写作能力，嘿嘿嘿~&lt;br&gt;不得不说的是，这几天我过的很爽哈，一下看了好几天的电影，都是名气很高的电影，看完电影之后就想
      
    
    </summary>
    
      <category term="影评" scheme="https://indexcode.cn/categories/%E5%BD%B1%E8%AF%84/"/>
    
    
      <category term="个人分享" scheme="https://indexcode.cn/tags/%E4%B8%AA%E4%BA%BA%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>彗星来的那一夜-影评</title>
    <link href="https://indexcode.cn/2017/12/2017.12.04%20%E5%BD%97%E6%98%9F%E6%9D%A5%E7%9A%84%E9%82%A3%E4%B8%80%E5%A4%9C-%E5%BD%B1%E8%AF%84.html"/>
    <id>https://indexcode.cn/2017/12/2017.12.04 彗星来的那一夜-影评.html</id>
    <published>2019-04-13T07:26:18.744Z</published>
    <updated>2019-04-13T07:26:18.744Z</updated>
    
    <content type="html"><![CDATA[<p><strong>彗星来的那一夜-影评</strong>   <excerpt in index | 首页摘要></excerpt></p><p><strong>想象一下我们生活在一个多平行空间中，有无数个平行空间中的我们，每做一个选择就会在另一个平行世界中发生另一种我们的人生..</strong></p><p>转载一篇我认可的影评吧，不看这篇影评我都注意不到电影中的这些细微之处的细节。转载自–豆瓣   <a href="https://movie.douban.com/review/7109306/">原文地址</a></p><ol><li>全片的关键词是片名“Coherence”，而不是“薛定谔的猫”</li></ol><p>我得说，原片名《Coherence》比中文译名《彗星来的那一夜》逼格高很多。</p><p>Coherence，直译就是“相干性”。经典物理中最简单的定义就是：这是一种让两列波产生干涉的性质。而在量子物理中，coherence可以从很多种角度去定义，后面再讲。</p><p>我不同意有人说的这是一部披着科幻外衣的人文片。相反，这片子的科学内核硬得很。用“Coherence”作片名，就说明编剧对量子物理的了解已经超过了简单卖弄一下“薛定谔的猫”这个概念或是不管三七二十一拿过“平行世界”的概念就来用的水平。我倒觉得最后女主黑化，展现“人性”的那一段，反而是副主题而已。</p><p>那么，“薛定谔的猫”和“平行世界”有什么关系？Coherence在这里又是什么含义？</p><p>简单来说，“薛定谔的猫”不是“平行世界”导致的结果。“平行世界”只是用来诠释“薛定谔的猫”的理论之一，更通行的说法是“多世界诠释” （many-worlds interpretation）。</p><p>这部片子其实是在量子力学的多世界诠释是正确的设定下，描写了“多世界”（平行世界）发生相干（coherence）时发生的事。</p><p>“薛定谔的猫”，让很多人迷惑的多半是在人开门观察之前，猫所处的那种不死不活又死又活的状态。其实，这种状态虽然诡异，但理论上总可以用一个波函数来表示。这个波函数在物理学家眼中具有很好的性质，因为它随时间的变化遵循薛定谔方程。门一开，“诡异”的状态立刻解除，我们得到了一个确定的状态：死或者活。开门瞬间猫的状态改变了，这意味着猫的波函数也有了一个突变，这个突变几乎是瞬时的，且不遵循薛定谔方程，是一种看上去由我们的观察（测量）而导致的突如其来的变化——这种由测量导致的突变才是更诡异的地方。</p><p>这种突变的本质是什么？就是量子力学如何诠释的问题了。两种最流行的诠释就是：哥本哈根诠释和多世界诠释。</p><p>哥本哈根诠释的核心在于波函数会“塌缩”，也就是测量瞬间，波函数以一定概率“突变”到一个确定的状态。在这种诠释下，不存在“平行世界”。猫死掉或是活着，完全是我们所在的唯一的宇宙里发生的一个随机的现象。</p><p>而在多世界诠释里，开门之前，一切和哥本哈根诠释一样。开门的一瞬间，波函数并没有塌缩，但宇宙却一分为二。在一个宇宙里猫是死的，在另一个宇宙里猫是活的。关键是，活猫的宇宙和死猫的宇宙在很短的时间里就“退相干”（decoherence)了，因此，这两个宇宙不会重叠——或者说它们退相干的速度非常之快，以至于一个宇宙中的人不可能觉察另一个宇宙的存在。</p><p>很明显，这部片子讨论的不是猫在开门之前的又死又活的状态（刘慈欣的《球状闪电》讨论的倒是这个），而是“开门之后”发生的事情。影片的设定里，量子力学的多世界诠释是正确的，而哥本哈根诠释是不正确的。因此，开门之后，各种可能的宇宙同时产生。只不过彗星发挥了神奇的作用，将这些可能的宇宙保持在一个相干的状态，里面的人可以看到甚至进入另一个宇宙。</p><p>其实，这一点在Hugh读那本书的时候已经说的很明白了。因此，最后天亮，彗星解体，世界看似回到正常的时候，发生的也不是“塌缩”，而是多世界之间“退相干”了。</p><p>结论：很多评论里都在用薛定谔的猫来解释这片子，其实这片子跟薛定谔的猫那种又死又活的状态没有什么关系。全片没有任何地方发生了“塌缩”，即使到最后天亮了一切看似恢复正常了，也不代表其他平行宇宙塌缩掉了。而只是说明所有的平行宇宙都退相干了，不再处于coherence的状态了。</p><p>所以，那诡异的一夜，发生的事情，就是平行宇宙间的coherence，以此作片名，还是相当精准的。</p><p>——————————————————————</p><ol start="2"><li>谁制造了平行世界？</li></ol><p>个人理解，彗星可能开了个头（有的宇宙里Hugh的手机裂了，有的没有），但绝大多数的平行世界都是那八个人自己制造的。</p><p>回到薛定谔的猫。宇宙的分裂和平行世界的产生，都是由“开门观察”这一行为造成的。也就是说，一次“测量”可能的结果有多少种，就会造成多少个平行世界。</p><p>讨论这部电影的时候，我们当然不必太过拘泥于“测量”的精确定义。我们只要记住，当他们每一次就某件事做出选择，他们就制造出了对应这个选择不同结果的平行宇宙。</p><p>一开头宇宙就分裂了，有的宇宙里Hugh的手机裂了，有的世界里没有（最后打成一团的时候就看到了）。 这个分裂的原因没有明说，可能是彗星。</p><p>而其中一次明显的人为选择，就是Hugh选择创可贴的种类。两种选择，制造出两个平行宇宙。</p><p>第二次明显的人为选择，就是荧光棒的颜色。主视角的那个世界里他们选了蓝色，于是就必然有选择红色和绿色的平行世界在他们作出选择的时刻同时产生。所以，在这个蓝色荧光棒宇宙里，在他们做出新的选择之前，他们出去看到的另一个宇宙里的自己手里拿的荧光棒必然是不同的颜色——比如红色。</p><p>如果就此止步，两种创可贴的选择造成两个平行世界，这两个平行世界里又各自有三种荧光棒的选择，于是这里就有2乘3也就是6个平行世界。</p><p>接下来就疯狂了。他们八个人要用骰子人为制造随机性来标记自己。要知道，8个人掷骰子，每个人有6种可能，于是总共有6的8次方种可能的排列组合，这么一来，他们在之前的6个平行世界的每一个世界里又一下子制造出了6的8次方个平行宇宙，再加上照片的选择和随机物品的选择，这样下来平行宇宙的数量就多到令人发指的几千万个了。</p><p>所以，这么细抠下来，片子里平行宇宙的总数并不是一开始就有许多个，而是随着他们的选择一次次增长的。</p><p>另一个角度也可以说，让角色们做出不同的选择，不光是为了标记各个宇宙让观众不至于晕菜，事实上，每一个选择都创造了新的平行宇宙，是剧情向前推进的重要节点。</p><p>进一步想，其实除了前面那些很明显的选择，还有许多暗含的选择比如去不去贴那个留言，Mike去不去给自己留威胁信，要不要去把另一个自己揍一顿，等等。再比如一开始，停电之后要不要出去看，这是一个很重要的选择。很显然，女主最后进入的那个“幸福”的平行世界里，他们没有选择出去看，可以注意到那个世界里Hugh的头上没有创可贴。</p><p>所以，如果我们画出一幅平行世界的“进化树”的话，第一个很大的早期节点就是“要不要出去看”。选择不出去看的那个平行宇宙是一大分支，之后一切太平，没有因为选择产生新的分叉; 而选择了出去看的平行宇宙是另一个大分支，在其上又因为荧光棒、创可贴、骰子和随机物品的各种选择迅速地产生大量的分叉。</p><p>甚至可以猜测，那个“幸福”的平行世界是早在女主选择是否要放弃那个替补席位的时候就已经分裂出去的平行宇宙。这个宇宙早就分裂了，比那个晚上才产生的诸多宇宙“辈份”高得多。</p><p>而这颗彗星的作用，就是让这些本应该在非常短的时间里就退相干的平行宇宙保持长时间的相干状态。相干的表现，就是不同平行宇宙中的人可以看到、进入并且最终互相影响彼此的历史进程。</p><p>这颗彗星能把宏观世界的相干态保持那么长时间，研究量子计算的人肯定很感兴趣。</p><p>————————————————————————</p><ol start="3"><li>各个平行世界之间的时间差与因果链。</li></ol><p>有人也许会说，只有在别的宇宙里面掷完骰子把东西放进箱子以后才可能让Amir捡回那个箱子来啊。也就是说有的宇宙比别的宇宙时间进程快的多，那么到底是哪一家掷的骰子制造了平行宇宙呢？</p><p>我的答案是每一家都创造了平行宇宙，每一家也都是被别人创造的。平行世界之间存在时间差，并不能推翻之前所说“选择产生平行宇宙”的假设。</p><p>平行宇宙存在时间差应该是很自然的结果。比如一个宇宙里你选择了走路去约会，另一个宇宙里你选择开车。结果走路比较快，准时到达，开车的宇宙里你被堵了半天，迟到了。于是，两个宇宙里你们见面的时间不同，见面以后再做下一个选择的时间和之后的进程（比如女朋友是否同意跟你啪啪啪）当然也就不同了。</p><p>前面说了，因为coherence，那个晚上，不同平行宇宙中的人互相影响了彼此的历史进程。再细想下去，正是因为它们互相影响，才会导致里面的人去作出选择，而这些选择又是产生其他平行宇宙的原因。于是我们陷入了这么一个因果关系的怪圈：</p><p>作出选择——产生平行宇宙——平行宇宙互相影响——作出选择——产生平行宇宙——平行宇宙互相影响——……</p><p>而且，这个怪圈的存在形式不是简单地一个圈，而是在几百万个平行宇宙之间互相交织、错综复杂的网状结构。</p><p>更有意思的是，正是因为他们对确定性的追求，造成了更大的不确定性：</p><p>那么多平行宇宙造成困扰——想到掷骰子确定自己——掷骰子创造了更多的平行宇宙——有那么多的平行宇宙让他们感到困扰——想到用掷骰子来区别自己……</p><p>所以，当你投身其中，事件的先后是永远理不清的，这些平行宇宙共享一段互相交错而又自洽的历史。平行宇宙之间不仅不分彼此，而且不分先后。在这个自洽历史包含着的所有宇宙里，这八个人都会去做那几件关键的事——必然会扔骰子，Amir必然会去拍那张照片，必然会去选某种颜色的荧光棒……这些“关键事件”在哪个宇宙里发生在先，哪个宇宙里发生在后，根本不重要。这些平行宇宙是自己的因，也是自己的果。如果在某一个宇宙中他们不去做这些选择中的某一项，那么这个宇宙就会脱离这个自洽历史，而剩下的所有宇宙的历史自洽性依然不受影响。</p><p>所以，里面有一个角色说的话很好：我们总觉得另一个平行世界里的我们是”dark version”, 但是, “What if we are the dark version?”这句话显然是编剧想要把主题提升到人性的层面，但也说明一点：影片的拍摄必然要选取某个平行世界做为主视角，而我们要记住所有的平行世界都是平权的。既然这些平行宇宙在空间上通过那一块黑暗地带交织在了一起，那么它们的时间线互相纠缠，都不再保持独立和线性，也就是一件很自然的事情了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;彗星来的那一夜-影评&lt;/strong&gt;   &lt;excerpt in index | 首页摘要&gt;&lt;/excerpt&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;想象一下我们生活在一个多平行空间中，有无数个平行空间中的我们，每做一个选择就会在另一个平行世界中发生另一种我们的
      
    
    </summary>
    
      <category term="影评" scheme="https://indexcode.cn/categories/%E5%BD%B1%E8%AF%84/"/>
    
    
      <category term="个人分享" scheme="https://indexcode.cn/tags/%E4%B8%AA%E4%BA%BA%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>寂静岭-影评</title>
    <link href="https://indexcode.cn/2017/12/2017.12.04%20%E5%AF%82%E9%9D%99%E5%B2%AD-%E5%BD%B1%E8%AF%84.html"/>
    <id>https://indexcode.cn/2017/12/2017.12.04 寂静岭-影评.html</id>
    <published>2019-04-13T07:26:18.743Z</published>
    <updated>2019-04-13T07:50:08.307Z</updated>
    
    <content type="html"><![CDATA[<p><strong>寂静岭-影评</strong>   <excerpt in index | 首页摘要></excerpt></p><p>看完电影寂静岭之后想自己写一篇影评但是由于自己腹中实在没有什么干货，写不出来~~~（还是得多看书啊）<br>从网上看到了一篇讲解的非常全面的影评，看了这个影评才感觉电影中的好多东西都没有理解到位~转载到自己的博客上，以后想回看方便一些~</p><p>转载自–豆瓣 <a href="https://blog.sina.com.cn/s/blog_6707d64e0100h50g.html">原文地址</a></p><p>本文从2006年底笔者看过该片到完成该文，共看过该电影三次，构思并创作全文大约用了半年的时间。<br>现作者本人将原文全部发于豆瓣，特此说明。</p><p>2006年4月，由曾经指导过电影《狼族盟约》的法国著名导演克里斯多夫·甘斯（Christophe Gans)制作的恐怖电影《寂静岭》（英文名《Silent Hill》,中国台湾译为《沉默之丘》），在上映三天内就突破了2000万美元大关。作为同样是由同名计算机游戏改编的电影，《寂静岭》一雪《生化危机》和《古墓丽影》等影片的前耻，受到游戏玩家的一致好评，《寂静岭》也由此成为了电影界和以游戏改编的电影中里程碑式的作品。</p><p>尽管《寂静岭》获得了巨大的成功，但是仍有对其批评的声音。例如就有新闻认为《寂静岭》是一部“恶评如潮”但却票房高的影片（听起来怎么像在评价某些中国“大片”？），还有影评人称“看不懂”《寂静岭》，更有人想象力颇为丰富地将《寂静岭》与《无极》相比并认为其是一路货色。其实在文化全球化和后现代的今天，出现让每个人都拍手叫好的电影几乎是不可能的，何况还有那么多别有用心哗众取宠的人和不明就里盲从潮流的大众。《生化危机》和《古墓丽影》仅就电影本身来说，我个人认为并非“烂片”。而之所以它们被大加诛伐，就是因为与原游戏脱节严重，批评它们的人也多以游戏玩家为主。《寂静岭》之所以被玩家看好，就是因为它很真实地还原了同名游戏中推理解谜的特点和血腥、肮脏、恐怖、压抑的环境气氛。何况无论是电影还是游戏，《寂静岭》都绝对不是一个简单的、为渲染恐怖而生的“鬼域”或“血腥美学”，它是一个充满深刻人文内涵的地方，包括宗教、道德、哲学、性等多种元素和象征、隐喻、暗示等多种手法。因而对于没有玩过《寂静岭》这部系列游戏（截止拍电影时已有四部《寂静岭》游戏，现已出第五部）的人或者对这些不了解的人来说，“看不懂”实属正常。<br>既然有人说“有一千个观众就有一千个哈姆雷特，所以有一千个观众就有一千个寂静岭”，那么现在就让我们回到寂静岭：</p><p>寂静岭的世界观：“三元论”、“二元论”与“二元主义”<br>看过《寂静岭》的人可能都应该感受到电影中不止存在着一个空间。对于寂静岭究竟有几个空间的问题，普遍存在“已死论”、“二元论”和“三元论”三种观点。持“已死论”（也就是认为寂静岭就是“阴间”，进入寂静岭中的人实际已在片头车祸中死亡）的观众可能是“没看懂”电影或者受到一句被错误翻译的台词字幕——“你们都已经死了”（实际应为“你们都已经被诅咒了”）的误导。“三元论”则是广受支持的一种观点，更有文章用“黄澄澄”、“灰蒙蒙”、“黑漆漆”三个词简明而传神地概括了寂静岭的三个世界。但是我认为，虽然寂静岭存在三个世界，但是“三元论”这个说法却是不准确的。<br>首先可以区分一下寂静岭的三个世界都是什么：<br>1.真实世界：就是真实的世界，在这个世界中的寂静岭就是一个被废弃的小镇，即“黄澄澄”的世界，这是由于电影中多数表现真实的白天都采用了一种温暖阳光的色调。<br>2.“表世界”：即“灰蒙蒙”的世界，就是女主人公罗丝（Rose）在车祸醒来后发现自己身处的世界，仿佛冬天的样子，实际上是由恶魔化之后的阿莱莎（Alessa)用邪恶的力量营造的世界，将一切“罪有应得”的人困在了里面。<br>3.“里世界”：即“黑漆漆”的世界，就是表世界响过警报之后不定期转化后的世界，一派血腥、肮脏的景象并有各种怪物出没，实际是阿莱莎内心痛苦和压抑的反映并由其邪恶的力量和仇恨的情绪控制。表世界和里世界都是从《寂静岭》游戏中借鉴来的概念。<br>存在三个世界这一点似乎没有问题了。但经过分析之后，我们会发现，如果从“次元对立”的角度看，那么只有两个对立的空间。在这之前，要看一个概念：二元主义。<br>“二元主义”（Dualism)在哲学中作为一种思想通常指承认两种根本的，不可再分且互异的元素，它们彼此冲突或者相互补充，又分为将这两种基本要素应用于认识活动中的“认识论意义上的二元主义”和用于解释一切广义上的客观现象的“形而上学意义上的二元主义”。“二元主义”本身也是西方历史文化自我否定式的发展规律自近代以来的产物，是对中世纪基督教唯灵主义的否定。<br>寂静岭的世界本身就存在表里世界的二元对立，这样以来加上真实世界，似乎“三元论”是成立了。但是对立的表里世界二者却不能同时与真实世界构成对立。因为寂静岭的世界要么是表世界要么是里世界，二者相互转化不能并存，所以导致要么是真实世界与表世界共同存在且对立，要么是真实世界与里世界共同存在且对立，无法存在真实世界、表世界、里世界同时存在并且对立的情况。需要说明的是，在里世界中的教堂只是由于信仰的原因使怪物无法进入而已，它并不具备表世界的特征，因而不是表世界，只能算里世界中的一个特殊地点；而阿莱莎所在医院的地下室也只是表世界里的一个特殊地点而已，还不能因为医院地下室有怪物和黑漆一片就认为那是里世界，因为表世界也有怪物，而地下室没有光自然是一片黑；而游戏《寂静岭》中表里世界的创造、形成原因与电影中不同，也不能作为解释电影《寂静岭》的依据。所以可以得出结论，寂静岭确实存在三个世界，但是从“对立”的角度看，只有二元对立。因而《寂静岭》中的世界观是存在三个世界的“二元论”，或者也可以认为实际只存在两个世界：真实的世界和变化着的寂静岭的世界。作为西方带有宗教题材的恐怖片，《寂静岭》也没有脱离二元主义的规律。<br>其实片中的这种二元对立在电影一开始就已经暗示了，那就是罗丝的女儿莎仁（Sharon)梦游时险些摔下悬崖的镜头，构成了上下的对立，水上和水下的对立，真实世界与虚幻世界的对立，善良的莎仁与阿莱莎的邪恶面的对立，甚至原来是水下世界却存在幻境中的烈火这样水与火的对立。当阿莱莎的邪恶面从悬崖上高速下坠的镜头出现时，我承认确实被吓到了，虽然据说这个停留的镜头只持续了0.7秒，但是那恐怖的笑容着实让人一震，真很难想象到可爱的阿莱莎的形象与这个恐怖的邪恶的阿莱莎是同一个小演员出演的！实在不得不佩服她的演技！</p><p>三个阿莱莎：<br>影片中就“小女孩”的角色问题，可能有人梳理不清阿莱莎、莎仁等人物的关系，参照一些公认的定论，我们可以明确有三个不同形式的“阿莱莎”存在。<br>1.阿莱莎：即在三十多年前被施以火刑的小女孩，也是后来在教堂进行屠杀的“终极怪物”，从她后来的身形可以的知她一直处于生长中。<br>2.阿莱莎的邪恶面：即引发罗丝车祸的人影，后来一直引导罗丝追踪、解谜，以燃烧的形式消失并在医院地下室与罗丝融为一体的小女孩，以一身阿莱莎当年穿的蓝紫色校服出现。她就是阿莱莎被严重烧伤后，在医院极度的恐惧和仇恨所产生的邪恶力量形象的具体化，她使阿莱莎拥有了恶魔的力量。<br>3.阿莱莎的善良面：即罗丝的女儿莎仁，由阿莱莎以分娩的形式产出，并由阿莱莎的邪恶面送出到真实世界的修道院，后由罗丝领养（由此得知阿莱莎的邪恶面有自由穿行于三个世界之间的能力）。有人根据阿莱莎曾被强奸过这一情节认为莎仁是阿莱莎的亲生女儿，这根本就是缺乏基本生活逻辑：以当时阿莱莎的年龄不可能有生育能力，另外以莎仁的年龄看，阿莱莎不可能怀孕二十年再生孩子，而莎仁一再梦游想回寂静岭就是受到神秘力量的召唤，回去与阿莱莎的邪恶面“结合”。</p><p>《寂静岭》中的人文内涵<br>《寂静岭》的人文内涵很大一部分来源于宗教元素的存在。就在片头罗丝发疯般寻找莎仁并最后与赶来的丈夫抱在一起时，画面背景就出现了一个亮着灯的十字架，为什么那边不出来一些别的东西呢？比如亮着灯的摩天轮？亮着灯的建筑？因为这本来就是一个暗示，告诉你本片涉及的宗教题材。而罗丝带莎仁去寂静岭的路上出现的一块牌子，镜头特地在上面停留，上面的内容是，“Do you not know that we will judge angels?Do you not konw that the saints will judge the world？（岂不知我们要审判天使么？岂不知教徒要审判世界么？）”这些句子本来就是《圣经·哥林多前书》中的内容，原文是“Do you not know that the saints will judge the world? And if you are to judge the world, are you not competent to judge trivial cases?Do you not know that we will judge angels? How much more the things of this life!（岂不知教徒要审判世界么？若世界为你们所审，难道你们不配审判这最小的事么？岂不知我们要审判天使么？何况今生的事呢？）”这就是在预示她们此去寂静岭的前景，被一群自宗教偏执狂“审判”，但是最终却是在暗示整个影片的结尾，就是魔鬼对教徒进行的审判，那些为恶而自认为正义的人，最终会被上帝抛弃——别告诉我你没有注意到牌子的外形就是一本书，别告诉我你看见那书的外形没有想到那是《圣经》！还有罗丝在寂静岭学校时候，门框上文字的一个镜头：“The foes of the righteous will be condemned.”这是《圣经·诗篇》中的内容，原文为：“Evil will slay the wicked；the foes of the righteous will be condemned（恶必害死恶人；恨恶义人的，必被定罪）。”已经不用多说了，那些自以为信仰上帝的人的命运，被定罪审判，已经再一次提前告知观众了。<br>从电影中我们可以得知，寂静岭是1974年11月因为地下煤矿的火灾而被废弃的小镇，至今地下的锅炉和矿脉还在燃烧着熊熊大火，因而寂静岭的空气中飘浮着致命的污染物。这一点在真实世界中表现的不明显。而在表世界则表现为似乎是不断落下来的“雪”，后来罗丝发现其实那是飘落的“煤灰”。而《圣经》中的《圣约翰启示录》是怎样描写“地狱”的呢？“它是一个永久的火湖，它的空气来自祸害的煤炭，光来自闪烁的火焰。夜晚一片漆黑，被诅咒之人的处所毒蛇横行。他们的希望是绝望。啊，永生之死！无生之生！啊，无尽的痛苦！”《圣经·福音书》中耶稣对地狱的描绘中也有“火是不灭的”字样。<br>里世界那些残破的墙壁，锈迹斑斑的管道和门，铁制的楼梯，转动的风扇，不知从何处产生的铿锵作响的金属撞击声和烟雾或蒸汽，似乎只存在铁黑和火红这两种颜色的压抑环境，正是大机器生产的工业时代的再现！这都是电影在以后工业时代的艺术风格对没落的工业时代以一种末世的悲凉形象进行的渲染。<br>对于《寂静岭》来说，后工业时代的艺术风格只是它的表象，《圣经》中的宗教隐喻才是它的实质。在里世界被开启之后，教堂中的教徒们祈祷所要阻止的也正是《圣经》中的“末日审判”，或电影中所谓的“天启”的到来。<br>《寂静岭》中的怪物也是一大看点。它们的外形和特征等都是严重烧伤的阿莱莎恐惧、痛苦、仇恨、愤怒心理的形象具体化之后的表现。无论电影中还是游戏中，这些怪物都不是仅为了引起恐怖的视觉效果而往“怎么丑陋怎么设计”出来的产物，宗教内涵与性暗示足以使这些怪物受到弗洛伊德信徒们的鼎礼膜拜！<br>罗丝进入里世界后首先看到的第一个恐怖景象就是一张铁床上的物体，具体是什么我看了好几次也没看出来，据说是一个死得很惨的人，这是对游戏场景的一个还原。罗丝后来发现铁丝网墙上挂着的是一个穿着“防护服”的教徒（人还活着）。如果我没有看错，他已经断了一只手，而且他就是以十字架的形式挂在那里（又是一个宗教暗示）。接下来冒出的那些还处于半燃烧残骸状态的怪物，就从它们的形体大小和发出类似孩童的嘶叫声音的角度看，其实它们就是当年在学校欺负阿莱莎的同学，这些孩子在被阿莱莎拥有的邪恶力量引发的火灾烧成焦炭以后，就以这种怪物的恐怖方式存在于里世界中。<br>第二个出场的怪物被游戏玩家称为“紧身衣”，也是电影中表世界出现的唯一怪物。从它被女警察西比尔用枪击毙时喷出的红血基本可以推测出那是一个被困在自己皮肤里的人。据说在拍摄这个怪物时也是用真人穿上无臂的紧身衣然后再用电脑合成的。这个怪物是游戏《寂静岭2》中男主角长年自我束缚在生病妻子身边痛苦心理的写照，搬到这里一样也可以有合理的解释。因为阿莱莎受到火刑时也被强制束缚。其实在这里我们可否认为“紧身衣”也具有某种性暗示的意义？阿莱莎被强奸这是片中的事实，而这个无臂的怪物光溜的躯体本身就像一个可以来回行走的男性生殖器。这个怪物就是阿莱莎被强奸时恐惧和痛苦心态的形象具体化。而怪物本身可以喷射出带有强腐蚀性的液体可否被看作是还不谙世事的阿莱莎对男人精液的恐惧印象？后来这个极具性暗示外形的怪物确实喷出了这些液体，而且是向女性喷射的，别告诉我你看不出这里的意思… …<br>从厕所中爬出来的怪物，就是当年阿莱莎被同学欺负躲进厕所后强奸了她的清洁工，电影中两次用身份牌上的名字柯林（Colin）暗示出他与怪物的关系。这个怪物被以扭曲的形式用铁丝网捆绑，应该是阿莱莎以被强奸时的心理对其的报复。而怪物的眼睛被铁丝网蒙住则是阿莱莎对柯林强奸时看了她身体的惩罚。只有怪物身上的输液瓶让人觉得奇怪，也可能是对游戏细节的尊重。怪物爬行时手臂所及之处会产生藤蔓般的血管并伴有毒泡产生，它不断“吐舌头”的动作则是性暗示的标志，而按照它那样两腿被高高吊起地爬行方式，每爬动一次，生殖器就会被严重摩擦，让它经受如此的痛苦也是阿莱莎对他的报复。<br>在罗丝于里世界的镜头中，出现很多笼子中倒挂的成年男性的尸体。为什么都是成年男人，我只能用阿莱莎本身是私生女、从小没有父亲所以很少接触男人，后来又被男人强奸而导致她对男性产生了极不信任感和仇视来解释了。随着罗丝下楼梯的镜头我发现其中一具男尸是没有生殖器的（被割去了？），或许这也就是因为上述原因导致阿莱莎对男人的报复。也是因为这种不信任和仇视也是阿莱莎没有将罗丝的丈夫拉入寂静岭世界的原因。而那些被倒挂的尸体，其实在《圣经》中的《彼得启示录》中就有很容易找到的答案。那里描写的地狱里被惩罚的人以不同罪恶的原因被施以不同的刑罚，但是被“吊起来”或“倒挂”却是很共同的一种。其实寂静岭的里世界就是“地狱”！<br>之后，多灾多难的罗丝遇上了一大群圣甲虫或被称为“人面虫”的怪物。三个来不及逃跑的教徒被虫子吃掉，看来他们身上看似结实厚实的防护服也不怎么样，顶多应该能抵挡下表世界“紧身衣”怪物喷出的毒液。关于这些虫子的来历，有人认为是阿莱莎重伤时被甲虫咬过或感觉身上像被甲虫咬的感觉幻化出的，其实这些都是没有任何根据的，至少电影中没有这些情节。认为虫子是阿莱莎以前同学的说法也似乎有些牵强，而且我没有怎么看出甲虫的脸怎么像人脸。其实这些虫子就是圣甲虫，古埃及神话中被认为是太阳神科何普拉的化身（当然，古埃及神话中太阳神不止他一个），原因是古埃及人看见这些乌黑的甲虫反射的阳光就认为它们是太阳神的化身。有人认为这些虫子是尸虫而不是圣甲虫，其实这点并不矛盾，因为古埃及人确实将这种被认为能避免尸体受到恶灵侵害的虫子倒入棺材。圣甲虫在古埃及神话中的另一意义就是“复活”，在电影中它们它们代表了经受火刑之后几乎死掉的阿莱莎“复活”时产生的仇恨。或者也可以揣摩一下这些虫子的宗教隐喻，《圣经·福音书》中耶稣对地狱的描述中就提到了地狱中“虫是不死的”（圣甲虫可以随着寂静岭表里世界的转换而复生），而《圣经》中《彼得启示录》更写到了迫害正义之士的人要“站在火焰中”，“受到不死之虫的吞噬”，而谋杀犯和帮凶则“被扔进满是恶毒害虫的狭小之地，他们受到那些生物的折磨，不停痛苦地扭动着。黑云一般的害虫向他们频频袭来。被谋杀之人的灵魂在一旁站立，目睹自己仇人受罚，并对他们说道，主啊，你的惩罚公正无比。”以上内容有没有让人想起那三个教徒被圣甲虫吃掉时候的场面？这些人里哪个当时不是想烧死阿莱莎的谋杀犯，哪个不是女教主克蕾丝（Ghristabella）的帮凶呢？<br>接下来出场的就是极具视觉冲击力的“大铁头”怪物了。这个在游戏《寂静岭2》中代表南主角自身的暴力倾向和对罪孽的自我审判的象征，据说其典型的特征“三角铁头”来源于寂静岭历史上美国南北战争时期一座监狱中的刽子手形象。在电影中，这个拖着沉重步伐游走于里世界并且见人就杀的怪物也着实让人感到恐怖和震撼。其极具男性特征的粗壮躯体正表达了阿莱莎复仇的渴望，之所以阿莱莎会被同学欺负、被强奸、被施以火刑而无法反抗，就是以为内她是一个弱小的女孩，而如此强悍的外形则正好符合阿莱莎复仇的条件。有人曾对电影里三角头的武器由游戏中极具性暗示作用的长矛换成大刀而感到遗憾，但是我觉得这大可不必，因为根据弗洛伊德的理论，不仅是长矛，一切长形、凸起、竖起、坚硬有穿刺力的物体，尤其是武器本身都是极具性暗示的。当罗丝和女警察西比尔（Cybil）在小屋的铁门后面躲避铁头怪物的剧情里，当铁头怪物用极具性暗示作用的大刀“刺破”关着两个“女性”的铁门，并将已经“进入”铁门的大刀来回“搅动”时，这里的“大刀”、“小屋”、“铁门”、大铁头伸进来的“手”和“门闩”，甚至被放进来的几只圣甲虫本身就带上了弗洛伊德性暗示的暧昧色彩。再联想到大铁头在教堂门前因为安娜（Anna）曾经向阿莱莎的生母扔石头而石头而将安娜撕成两半的情节里，你说铁头怪物你要撕就撕好了，为什么还要把安娜衣服扒光了再撕呢？大铁头扒人家衣服时干净利落地简直有几分强奸的神韵，这是否是阿莱莎对自己被强奸的报复呢？弗洛伊德又在微笑了… …<br>就那把大刀看，似乎《圣经》也要来分一杯羹。《圣约翰启示录》中写到末日审判中，羔羊（本指耶稣，在电影中能否是对柔弱的阿莱莎的暗喻？）揭开七印，倾斜出愤怒（此处与电影一致），放出四个人，第一个被赐予“冠冕”（铁制三角吗？），第二个被赐予大刀… …看来这下，上帝要与弗洛伊德一起微笑了。<br>那群护士怪物，本来也是游戏《寂静岭2》中男主角长期性压抑的产物或者《寂静岭1》中阿莱莎对医院的反感的产物，在电影中就只能解释为阿莱莎得到邪恶力量时由于极度愤怒而将身边的人都杀死并变成怪物，从片中也可以得知当年寂静岭的大火也确实烧死了一些无辜的人。那个没有眼睛的红衣护士是因为好奇而看了重伤之后阿莱莎后被阿莱莎挖去了眼睛并一直照顾阿莱莎的生活。护士怪物们用利器相互切杀并不是自相残杀，而是感觉到身边有人但却因为无光（片中说到它们只对光有反应）的反应而已，而这些护士怪物走路时的动作被誉为“痉挛芭蕾”，据说她们都是由艳舞女郎和爵士舞蹈家扮演。<br>在教堂最后那场稍显“华丽”的屠杀中，被罗丝（或者说阿莱莎的邪恶面）的血腐蚀的教堂地板上，真正的阿莱莎从满是暗红色烈火和钢铁设备的地下出现了。她在杀死克蕾丝教主的时候，很明显可以看见，最早刺进其身体的铁丝网是从裙子下面伸入直接刺进下体的，这又是一个明显的性暗示。从克蕾丝那身蓝紫色的衣着与阿莱莎就读学校学生校服的颜色一致我们可以得知克蕾丝有可能是那所学校的老师，如果要宣传一种宗教，那么从孩子抓起完全是可能的，何况在西方并不是没有教会学校。那么也就是说孩子们认为阿莱莎是女巫除了有片中提到“父母的灌输”以外，很有可能有克蕾丝老师的教唆和命令。其中克蕾丝找阿莱莎的生母谈话时曾关门推走了几个好奇的学生，由此得知她们谈话的地点就是学校，能在学校召见家长的，除了老师还有谁呢？而正是因为学生们被克蕾丝唆使欺负阿莱莎，她才会躲进厕所而遭强奸，因而完全可以得知阿莱莎这样杀死克蕾丝是对其行为导致自己遭到强奸的报复。最后，阿莱莎将克蕾丝一分为二，正是让其知道阿莱莎受火刑而痛苦地分裂为一个善良体和一个邪恶体的感受，所谓以其人之道还其人之身，而教堂这场屠杀正是犹太教末世论和条顿化基督教对最后审判日观念的体现，或许走进寂静岭就是打开了《圣经》。<br>其实片中众多的性暗示除了可以从阿莱莎的经历解释外，也可以从影片导演的话看出一些内容——“我喜欢女人，喜欢和美国婊子做爱。我想拍一部到处都是性感女人的电影，没一个男人。我不想处理和男人有关的东西。”只是可怜了这些女演员们一次又一次成为了导演们“意淫”的对象。</p><p>对于《寂静岭》中杂项的解释试探：<br>1.寂静岭中的真实世界与表世界，真实世界与里世界都可以以一定方式联系，此处可以从罗丝给丈夫的电话，女警察发给总部的求救，丈夫闻到罗丝的香水味得知。<br>2.阿莱莎是通过自己邪恶面造成的车祸的方式，用神秘的力量将罗丝和女警察拉进寂静岭表世界空间里的，这可以从很多相关资料中得到证明。女警察很有可能是阿莱莎故意拉进寂静岭以用来保护罗丝完成任务的。女警察跟踪母女俩的原因是女警察曾去寂静岭调查过一个杀人狂将一男孩塞进煤矿通风管道的案件，进而对想去被废弃小镇的大人加小孩的组合加以怀疑。对于有资料认为曾有克蕾丝身边一个塑料女模特是暗指女警察这点不予支持，我认为之所以有这种想法是因为女警察头发短而塑料人正好没头发导致看起来相似而已，而且到不如说那塑料是在暗指克蕾丝自己，被控制在寂静岭而又不自知的“傀儡”。<br>3.注意女警察的名字，西比尔，英文为“Cybil”，乍看来就是一个普通的英文名字而已。但是英文中“女巫”一词，除了常用的“witch”以外，还有两个词，分别是“sybil”和“sibyl”，为女巫、女算命师和女预言师的意思。有没有发现，其实这两个词中第一个词与女警察的名字“Cybil”只相差了一个首字母而且它们的发音是一致的？有没有发现第二个词“sibyl”仅仅是把第一个词“sybil”中间的两个字母“y”和“i”调换了一下位置，而且它的发音也与“Cybil”一致呢？也就是说，女警察的名字本身就是“女巫”或者说被设定为“女巫”的谐音，这又是一个暗示，暗示女警察Cybil被烧死（与女巫被处死的方式一致）的结果。<br>4.真实世界转换与表世界怪物出现时会造成收音机、手机等电子产品噪音这点是对游戏的还原，无科学解释。<br>5.里世界经常出现的风扇的喻义：一个是工业生产本身必须的通风设备，也是后工业艺术风格的元素，也是里世界压抑的工业运行声音的来源，也是对里世界就是“绞肉机”的暗示，而且也有宗教观点认为地狱的运行就是“铁轮”来回转动的原因。<br>6.教徒们用来对表里世界转换的报警工具是笼子里的鸟，这也是今天用于监测煤矿一氧化碳含量的工具。<br>7.片中寂静岭的世界周围都是悬崖，这也是被困在这个空间里的人跑不出去的原因。即使能跑出去，另外的地方也是表世界也是表世界的延伸，会转成里世界，所以不如老老实实呆在教堂里避难。<br>8.不支持片头NATHAN旅馆下的“DRUGS”（药的意思，也指毒品）是对小镇贩毒的暗示。这是游戏里的情节，电影中没有交代。这最多就是对游戏的还原，如果是暗示也只能是暗示教徒们对他们宗教的信仰如吸毒一般。<br>9.片中出现的男警察就是当年在寂静岭从火刑架上救下阿莱莎的男警察，因为是好人，所以没有被阿莱莎困在寂静岭世界的空间里。<br>10.罗丝拿到画的信箱号是111，后来在旅馆中找到火刑画后面的房间（就是当年阿莱莎受火刑的房间）也是111，一处明显的暗示。<br>11.女警察护送罗丝下电梯时与几个穿防护服的教徒发生打斗，她曾经将一人隔着防护服打得头部直接喷血，这样的人还能再爬起来对女警察进行殴打，我觉得施瓦辛格也不行！坚定为硬伤！<br>12.不清楚这点应该如何解释：片中已经告知，阿莱莎拥有邪恶力量引发的大火使寂静岭废弃是在1974年，罗丝来寂静岭已经是2006年，中间已经有32年时间。但是从片中克蕾丝前后32年的模样我们可以发现她几乎没有什么变化，也就是说有可能被困在寂静岭的人已经停止生长了，因为从寂静岭表世界建筑的破旧可以得知如果不是有年头的话是不会出现这种情况的。而且认为安娜就是阿莱莎以前同学的说法也是不可能的，因为她怎么看也就二十多岁，绝对不像三十多岁或者四十多岁的人，1974年可能她还没有出生呢。而阿莱莎只可能把迫害过她的教徒拉进她的空间，因此看来教徒从1974年以来就停止生长是正确的，而奇怪的是最后屠杀时的阿莱莎本体却已经是成年人的体形了，可以可见她却是一直生长的。疑问就在于即使人不生长了，但是片中的人还是得出来找食物的，在寂静岭那样的环境中任何种植和食品加工都是不可能的，我们也看到安娜找的都是一些以前寂静岭剩下的食品罐头。但是请注意！什么罐头的保质期能保证32年呢？寂静岭里又有多少罐头能供那么多人维持32年呢？而且寂静岭里的人的水又从哪里来的？自来水厂肯定是一片废墟了，片中说寂静岭边的河也被绝壁隔住了。里世界似乎下雨，但是里世界的雨水能喝吗？即使能喝，能供应这么多人吗？里世界的雨水会不会随着世界的转化一样消失掉？如果说寂静岭的人是被“延缓”而不是被“停止”以解释教徒的年龄的话，那么当年解救过阿莱莎的男警察又怎么解释呢？假设1974年他只有20岁，2006年他也有52岁了，但是片中他最多三十多岁而已，他不在寂静岭的世界怎么年龄也被“延缓”了呢？<br>13.罗丝带着阿莱莎开车回家，虽然出了寂静岭，世界也仍是一片灰色，来寂静岭的路上热闹的加油站也空无一人。回到家时，电影用罗丝在灰蒙蒙的寂静岭与丈夫所在的黄澄澄的真实世界的反复交替出现来说明罗丝其实是被永远困在了寂静岭的表世界里。原因很简单，当时的莎仁其实是阿莱莎的邪恶面通过对视与莎仁融为一体之后的人，或者说，莎仁已经不存在了。没有发现回家后的莎仁有一种成人的眼神，并且仿佛从来没有来过自己的家一样，进屋之后有种好奇感？阿莱莎就是因为曾经被自己的生母抛弃给教徒，而从罗丝这里感受到真正母爱，而想把罗丝永远困在寂静岭的世界里以独享母爱！“莎仁”上车之后吸手指的动作就是在使用神秘力量，她吸手指之后，原本不能发动的汽车发动了。有文章认为车是从悬崖上“飞”出去的，我觉得不是，从车经过悬崖的画面明显可以发现原来的绝壁上已经出现了一座桥梁，这也是车上的莎仁吸手指使用神秘力量延伸出来的结果，最后表世界的空间被一直延伸到罗丝的家。我认为，劫难之后的罗丝其实已经知道自己的女儿不是原来的莎仁了，也知道自己将永远被困在寂静岭的表世界，否则她怎么就上去去试图开动这辆之前已经开过但却无效的车呢？罗丝原本也知道寂静岭四周是无路可走的虚悬，怎么就敢开车往外走呢？原因就是她知道“莎仁”或者说阿莱莎不会让车掉进悬崖而一定会让自己开车出寂静岭。世界仍是一片灰色和加油站的空落罗丝不可能没有察觉，最后她进屋后直愣地望着沙发，就是她感觉到了自己丈夫的存在，但却也知道这种“两个空间”的存在是咫尺天涯了。其实者这一切都是阿莱莎安排好的，她将自己的善良面莎仁送出寂静岭险恶的地方被人收养，长大到自己受火刑的年龄再招回寂静岭，复仇并完成合体，然后独享母爱。</p><p>寂静岭所要表达的主题：<br>1.母爱：体现在罗丝面对如此艰险的环境还义无返顾地寻找女儿，阿莱莎的生母无论在里世界还是在最后审判中都安然无恙。女警察一句“在孩子的眼中，母亲就是上帝”和罗丝对其的引用，以及女警察被烧死时也喊母亲、都揭示了这一点。<br>2.后工业时代：一如美国甚至世界各国在后工业时代没落的工业城市，寂静岭也象征一个时代的终结。<br>3.宗教反思：阿莱莎是因为私生女所以才被当地的“邪教”组织所不容，类似的还有旧中国某些某些地区女人未婚先孕就要被淹死的陋习。美国本身是一个新教国家，而中世纪天主教在欧洲烧死的“女巫”则不计其数，无数无辜的人被以各种名义施以火刑处死，沦为宗教狂热和愚昧的牺牲品。最荒谬的更有1474年巴塞尔城曾因为一只公鸡下蛋（公鸡中的战斗机？）被视为“女巫”而烧死！美国本身在成立之前也有从欧洲大陆来的各种教派，导致今天美国各种名目繁多的宗教组织。在美国建国前的混乱状态，各教派都认为对方是“异端”，结果就是更多人因为“异端”或“女巫”被推上火刑架。所以《寂静岭》不仅是基督教新教对天主教的反思，也是美国新教本身对自己的反思，一如阿莱莎生母说：“我们的信仰是我们的掘墓人。”<br>4.对善恶的思考：电影中借男警察之口道出“魔鬼也有自己的正义”，如果正义用邪恶的手段摧毁邪恶，那么它究竟是正义还是邪恶？究竟什么是善和恶？是否存在一个绝对的标准？<br>5.赎罪/审判之地：这本来是游戏《寂静岭2》所要表达的主题，在这里同样适用。寂静岭其实就是每个人心中的道德底线，是每个人最后都要受到的自我拷问。那些做了坏事的人最终都要被最后审判，赎罪的方式就是接受审判，就像电影中那些教徒，那些为恶又自我开脱而不自知的人，早晚都要受到魔鬼的最后审判！<br>寂静岭是一个恐怖、压抑而又充满魅力的地方，我不知道为什么我给文章标题鬼使神差地写上了“带我回到寂静岭”，仿佛我曾经去过，或许那里对人的内心有种神秘的感召力。李安导演在奥斯卡获奖时曾经说人人心中都有一座断臂山，如果真是这样的话，那么我认为每个人心中也有一座寂静岭，那是每个人心中的自我审判，是每个人最后都要回到的地方..</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;寂静岭-影评&lt;/strong&gt;   &lt;excerpt in index | 首页摘要&gt;&lt;/excerpt&gt;&lt;/p&gt;
&lt;p&gt;看完电影寂静岭之后想自己写一篇影评但是由于自己腹中实在没有什么干货，写不出来~~~（还是得多看书啊）&lt;br&gt;从网上看到了一篇讲解的非常全
      
    
    </summary>
    
      <category term="影评" scheme="https://indexcode.cn/categories/%E5%BD%B1%E8%AF%84/"/>
    
    
      <category term="个人分享" scheme="https://indexcode.cn/tags/%E4%B8%AA%E4%BA%BA%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>前端练习题</title>
    <link href="https://indexcode.cn/2017/11/%E7%BB%83%E4%B9%A0%E9%A2%98.html"/>
    <id>https://indexcode.cn/2017/11/练习题.html</id>
    <published>2019-04-13T07:26:18.741Z</published>
    <updated>2019-04-13T07:26:18.742Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 前端练习题：</strong> <excerpt in index | 首页摘要></excerpt></p><h2 id="隐式类型转换"><a href="#隐式类型转换" class="headerlink" title="隐式类型转换"></a>隐式类型转换</h2><ol><li><p>var str = false + 1;<br>document.write(str);<br>结果为：1        （false会发生隐式类型转换成数值类型的0）</p></li><li><p>var demo = false == 1;<br>document.write(demo);<br>结果为：false  （同第一题）</p></li><li><p>if(typeof(a) &amp;&amp; - true + (+ undefined) + “”) {<br>   document.write(‘基础扎实’);<br>}<br>结果为：基础扎实   （typeof()是唯一一个使用未经声明的变量，不报错的方法，并且它的六个返回结果都是字符串类型的；””空字符串起连接作用）</p></li><li><p>if(11 + “11” * 2 == 33) {<br> document.write(‘基础扎实’);<br>}<br>结果为：基础扎实     （运算符的优先级比较，先算乘除再算加减。等号优先级最低。牢记字符串的连接作用。）</p></li><li><p>!!” “ + !!”” - !!false || document.write(‘你觉得能打印，你就是猪’);<br>结果为：1</p><h2 id="预编译"><a href="#预编译" class="headerlink" title="预编译"></a>预编译</h2></li><li><p>function bar() {<br> return foo;<br> foo = 10;<br> function foo() {</p><p> }<br> var foo = 11;<br>}<br>document.write(bar());<br>结果为：function foo() {};     （牢记函数预编译的四部）</p></li><li><p>function bar() {<br> foo = 10;<br> function foo() {};<br> var foo = 11;<br> return foo;<br>}<br>console.log(bar());<br>结果为：11                     （牢记函数预编译的四部）</p></li><li><p>a = 100;<br> function demo(e) {<br> function e() {}<br> arguments[0] = 2;<br> document.write(e);<br> if(a) {</p><pre><code>var b = 123;function c() { }    </code></pre><p> }<br> var c;<br> a = 10;<br> var a;<br> document.write(b);<br> f = 123;<br> document.write(c);<br> document.write(a);<br> }<br> var a;<br> demo(1);<br> document.write(a);<br> document.write(f);<br>结果为：2 undefined undefined 10 100 123     （全局变量有两种，第一种就是直接定义在全局中的变量，第二种就是没用var直接定义出来的变量。if里面不能定义函数，以前可以，现在不合法，但是也不会报错）</p></li></ol><h2 id="立即执行函数"><a href="#立即执行函数" class="headerlink" title="立即执行函数"></a>立即执行函数</h2><ol><li>function test(a, b) {<br> console.log(a, b);<br>}(1, 2);<br>结果：不报错，返回结果为：2。        （因为会把最后小括号当成随意写在文本中的，另外会返回括号里面最后的数）</li></ol><h2 id="new问题"><a href="#new问题" class="headerlink" title="new问题"></a>new问题</h2><ol><li>运行test()和new test()的结果分别是什么？<br>var a = 5;<br>function test() {<br> a = 0;<br> alert(a);<br> alert(this.a);<br> var a;<br> alert(a);<br>}<br>结果为：test执行结果为0、5、0   new test结果为0、undefined、0</li></ol><ol start="2"><li><p>分析下面的JavaScript代码段：<br> function employee(name, code) {</p><pre><code>this.name = &quot;wangli&quot;;this.code = &quot;A001&quot;;</code></pre><p> }<br> newemp = new employee(“zhangming”,’A002’);<br> document.write(“雇员姓名:” + newemp.name + “<br>“);<br> document.write(“雇员代号:” + newemp.code + “<br>“);<br>输出的结果是(  ).(选择一项)<br>A. 雇员姓名:wangli  雇员代码:A001<br>B. 雇员姓名:zhangming  雇员代码:A002<br>C. 雇员姓名:null, 雇员代码:null<br>D. 代码有错误，无输出结果<br>答案是：A     （因为根本就没有进行赋值、没用到传进去的参数、写死了，定式的，生成多少个都是这样的。如果想进行赋值的话应该写成  this.name = name,this.code = code）</p></li><li><p>var str = “abc”;<br>str += 1;<br>var test = typeof(str);<br>if(test.length == 6) {<br> test.sign = “typeof的返回值可能为String”;<br>}<br>document.write(test.sign);<br>结果为：undefined  (str先+=1得字符串形式的abc1.然后typeof(str)返回值是字符串形式的string，test是原始值，所以访问他的.length会形成包装类，test的长度确实是6，所以能走进if循环里。包装类保存不出来。)</p></li></ol><ol start="4"><li>function Person(name, age, sex) {<br> var a = 0;<br> this.name = name;<br> this.age = age;<br> this.sex = sex;<br> function sss() {<pre><code>a++;document.write(a);</code></pre> }<br> this.say = sss;<br>}<br>var oPerson = new Person();<br>oPerson.say();<br>oPerson.say();<br>var oPerson1 = new Person();<br>oPerson1.say();<br>结果为：1、2、1      (注意：题中的this.say = sss把sss保存出来了，与Person形成闭包 )    </li></ol><ol start="5"><li><p>var x = 1;<br>if(function f() {}) {<br> x += typeof f;<br>}<br>console.log(x);<br>结果为：1undefined    （boolean值为false的只有6个，上题中的不属于那六个，所以肯定能走进if语句中。typeof是唯一一个使用未经声明的变量不报错的方法）</p></li><li><p>(function(x) {<br> delete x;<br> return;<br>})(1);</p></li></ol><p>结果为：undefined     （可配置性。delete只能删除对象上的属性，比如在全局上定义一个 var a = 123；虽然a就相当于是window上的一个属性，但是delete window.a是删不了的。但是你要是在全局上就定义window.a = 123;或者 a = 123； delete a;结果就为真，可以删除的。这也就是可配置性一说！）</p><ol start="7"><li>var h = function a() {<br> return 23;<br>}<br>typeof a();<br>结果为：报错a is not defined</li></ol><p>重点中的重点！<br>  typeof (new Array).<strong>proto</strong>.constructor()<br>结果为：”object”     解析：先算括号里面的，再算点。优先级顺序。形式上又有typeof的两种形式的用法。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt; 前端练习题：&lt;/strong&gt; &lt;excerpt in index | 首页摘要&gt;&lt;/excerpt&gt;&lt;/p&gt;
&lt;h2 id=&quot;隐式类型转换&quot;&gt;&lt;a href=&quot;#隐式类型转换&quot; class=&quot;headerlink&quot; title=&quot;隐式类型转换&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
      <category term="学习笔记" scheme="https://indexcode.cn/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="前端" scheme="https://indexcode.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>说说滕王阁的修建者——“混蛋王爷”李元婴</title>
    <link href="https://indexcode.cn/2017/11/%E6%BB%95%E7%8E%8B%E9%98%81%E7%9A%84%E4%BF%AE%E5%BB%BA%E8%80%85--%E6%BB%95%E7%8E%8B%E6%9D%8E%E5%85%83%E5%A9%B4.html"/>
    <id>https://indexcode.cn/2017/11/滕王阁的修建者--滕王李元婴.html</id>
    <published>2019-04-13T07:26:18.740Z</published>
    <updated>2019-04-13T07:50:08.305Z</updated>
    
    <content type="html"><![CDATA[<h1 id="说说滕王阁的修建者——“混蛋王爷”李元婴"><a href="#说说滕王阁的修建者——“混蛋王爷”李元婴" class="headerlink" title="说说滕王阁的修建者——“混蛋王爷”李元婴"></a>说说滕王阁的修建者——“混蛋王爷”李元婴</h1><p>说到江西南昌的滕王阁，即使没去过的人，也一定听过它的大名，号称江南三大名楼之首，尤其是唐初诗人王勃的《滕王阁赋》，更让它名扬天下，其中的诗句“落霞与孤鹜齐飞，秋水共长天一色”流传至今。但历史上的滕王阁其实有三处，最早修建是山东滕州的滕王阁（已被毁，待复建），其次是江西南昌的滕王阁（知名度最高），最后修建是四川阆中的滕王阁。这三处滕王阁的修建者都是同一个人——即唐初的滕王李元婴。</p><p><img src="https://outwcl4zh.bkt.clouddn.com/%E6%BB%95%E7%8E%8B%E9%98%81" alt="滕王阁"><br>现在位于江西南昌的滕王阁</p><p>李元婴在历史上的知名度并不高，但要是说到他的父亲唐高祖李渊和他的哥哥唐太宗李世民，却是大家非常熟悉的历史人物。李渊共有二十二个儿子，除了隐太子李建成、唐太宗李世民等，还有这个最小的儿子李元婴。李元婴出生于公元630年，也就是贞观三年，这个时候的李渊早已禅让退位，年纪也64岁了，却也不耽误生孩子。贞观十三年，才十岁的李元婴被哥哥唐太宗封为滕王，封地在今天的山东滕州。<br>成年后，李元婴按照唐朝的制度，前往封地就蕃。只是这位王爷没有造福地方，相反却是骄奢淫逸、横征暴敛、大兴土木，引起了当地极大的民愤。根据相关的史书记载，李元婴在地方并无政绩可言，而是终日飞鹰走狗、声色犬马。据说他经常带着大队的人马在自己的领地内骑马打猎，甚至把忙于劳作的农民当靶子，玩弹弓射击，以此取乐，唐高宗李治为此还专门写信劝诫这位比自己小很多的皇叔不要用弹弓射人。<br>在生活作风方面，李元婴也是个十足的混蛋。他的王府里面不仅妻妾众多，而且特别青睐下属们的漂亮妻子。据说，在滕王李元婴待过的地方，下属官员们都明白这个“潜规则”，会自觉把自己的妻子送到王府，供这位王爷玩乐，若是不送的，则免不了被李元婴无故刁难和诬陷。<br>这位弄得“民怨沸腾”又“官怨沸腾”的贪败王爷，自然是皇帝最头疼的对象。唐太宗在位时期，对这位幺弟的各种混蛋行为往往是睁一只眼闭一只眼。唐高宗即位后，对这位小皇叔，或是当面警告，或是写信劝诫，实在没办法了，就一贬再贬，进行惩罚。先是贬到苏州，再到洪州（今江西南昌），后来又到隆州（今四川阆中），只是李元婴恶习不改，依旧我行我素，无法无天。<br>虽然品行恶劣，但李元婴却有很高的艺术造诣，这自然与他从小的宫廷艺术熏陶有关。据说他“善画”，而且“工于蛱蝶”，由此留下了著名的“滕派蝶画”。除此之外，他还非常钟情于建筑艺术，每到一处就广邀天下的能工巧匠，大肆修建行宫、楼阁。永徽四年（653年），他选址赣江之滨，修起了一座高插云天的楼阁，这就是王勃笔下的滕王阁了，为后人的宝贵的历史文化遗产。转载自 百家好 –我爱读历史</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;说说滕王阁的修建者——“混蛋王爷”李元婴&quot;&gt;&lt;a href=&quot;#说说滕王阁的修建者——“混蛋王爷”李元婴&quot; class=&quot;headerlink&quot; title=&quot;说说滕王阁的修建者——“混蛋王爷”李元婴&quot;&gt;&lt;/a&gt;说说滕王阁的修建者——“混蛋王爷”李元婴&lt;/h1&gt;&lt;
      
    
    </summary>
    
      <category term="历史故事" scheme="https://indexcode.cn/categories/%E5%8E%86%E5%8F%B2%E6%95%85%E4%BA%8B/"/>
    
    
      <category term="历史故事" scheme="https://indexcode.cn/tags/%E5%8E%86%E5%8F%B2%E6%95%85%E4%BA%8B/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="https://indexcode.cn/2017/11/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.html"/>
    <id>https://indexcode.cn/2017/11/正则表达式.html</id>
    <published>2019-04-13T07:26:18.739Z</published>
    <updated>2019-04-13T07:26:18.740Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 正则表达式：</strong> <excerpt in index | 首页摘要></excerpt></p><h1 id="正则表达式-就是个规则-是个对象"><a href="#正则表达式-就是个规则-是个对象" class="headerlink" title="正则表达式   就是个规则  是个对象"></a>正则表达式   就是个规则  是个对象</h1><p><strong>RegExp正则表达式的作用：匹配特殊字符或有特殊搭配原则的字符的最佳选择。</strong></p><p>两种创建方法：直接量<code>var reg = /pattern/;</code>或者<code>var reg = new RegExp(&#39;pattern&#39;);</code>但是也可以不加new，但是这就相当于直接把RegExp(‘pattern’)拷贝过来了。而且也可以在()里面添加一个已经设置好的正则规则。如：<code>reg = /abc/;  var reg1 = new RegExp(reg);</code>这个reg1就跟reg一样了。 <strong>推荐用直接量。</strong></p><p><strong>\n换行</strong><br><strong>\r行节束缚</strong>    windows系统上是他们两个的一起作用的,一个回车就相当于\r\n  lunix上只有一个换行符,也就是只有\n<br>\t一个制表符，一个缩进，可以设置一个缩进等于几个空格</p><p><strong>\</strong> 转义字符的作用还有，如果你想打印或者使用特殊字符的话就在前面加上转义字符，让特殊符号回归成本来的意义。</p><p>如果想写特殊的格式，多行字符串，就在字符串每一行的结尾加上转义的字符就行了。可如果是字符串的话在每一行的结尾加上+号也是可以的。比如：</p><figure class="highlight cal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span>&gt;&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line"><span class="keyword">var</span> <span class="keyword">div</span> = document.getElementsByTagName(<span class="string">'div'</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">div</span>.innerHTML = <span class="string">"\</span></span><br><span class="line"><span class="string">&lt;div&gt;\</span></span><br><span class="line"><span class="string">&lt;span&gt;邓宝宝很萌&lt;/span&gt;\</span></span><br><span class="line"><span class="string">&lt;/div&gt;\</span></span><br><span class="line"><span class="string">"</span></span><br></pre></td></tr></table></figure><p>另一种：</p><figure class="highlight cal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span>&gt;&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line"><span class="keyword">var</span> <span class="keyword">div</span> = document.getElementsByTagName(<span class="string">'div'</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">div</span>.innerHTML = <span class="string">"&lt;div&gt;"</span> +</span><br><span class="line">   <span class="string">"&lt;span&gt;邓宝宝很萌&lt;/span&gt;"</span> +</span><br><span class="line"><span class="string">"&lt;/div&gt;"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reg = /abcde/;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"123abcdeabcdeabcde"</span>;</span><br></pre></td></tr></table></figure><p>reg.test(str);判断str里面是否有abcde的字符串；返回值为true<br>str.match(reg);跟上面的方法正好相反。这是字符串上的方法，找字符串上符合正则表达式reg的方法。</p><h1 id="在后面加上i-g-m"><a href="#在后面加上i-g-m" class="headerlink" title="在后面加上i g m"></a><strong>在后面加上i g m</strong></h1><p>i  表示忽略大小写ignoreCase;<br>g  表示全局找符合条件的，但是不会识别特殊符的Globle,不加g的话匹配一个就停了。全局匹配。<br>m  表示可识别多行匹配了,match;<br>例如：多行匹配<br>  <code>var reg = /^a/g  var str = &quot;abc\nabc&quot;;  str.match(reg);</code><br>结果为一个a；但是第二个a也是符合条件的，想要第二个也匹配出来就要在后面添加一个m就能多行匹配了。查找开头为a 的话识别不了两个a，但是加上m就能识别了。</p><p><code>reg = /^a/</code> 就相当于一个开头是a的字符串规则。</p><h1 id><a href="#" class="headerlink" title="[]"></a>[]</h1><p><code>var reg = /[abcd][bcde]/</code>  第一个里面就是查找符合第一位的条件的，[a-z]代表从a到z的字母。[^a-z]代表查找任何不在条件的字符。还可以[a-z0-9]里面写好几个条件的。[]是第一位满足什么条件，ASCII码  A 65； a 97；因为中间有26个字母之外还有一些特殊符号呢。eg：<br> <code>var reg = /[^a-g][1-9]/g; var str = &quot;ah2dfsa&quot;; str.match(reg);</code><br>结果为：h2；<br>在[]里的^号是非的意思，就是取反的意思。</p><h1 id="-1"><a href="#-1" class="headerlink" title="()"></a>()</h1><p>()在正则表达式中的意义：reg = /(abc|bcd)d/g;|代表或者的意思；()代表连着后面的条件的，可以代表和的意思。必须是abc或者bcd连着之后的d的满足条件的字符。<br>eg：<br><code>reg = /(abc|bcd)d/g;var str = &quot;abcdbcdddsahf&quot;; str.match(reg);</code><br>结果为：”abcd”  “bcdd”;</p><h1 id="元字符：一些表达式的缩写形式；"><a href="#元字符：一些表达式的缩写形式；" class="headerlink" title="元字符：一些表达式的缩写形式；"></a>元字符：一些表达式的缩写形式；</h1><p>.   所有的都包括；[^\r\n];<br>\d  查找数字;就相当于[0-9];<br>\D  查找非数字；就相当于[^0-9];<br>\w  查找单词字符；word；就相当于[A-z0-9_]<br>\W  查找非单词字符；就相当于[^w]<br>\s  查找空白字符；代表一切空白；[\t\n\f\r\v ]<br>\S  查找非空白字符；[^s]<br>\b  匹配单词边界；单词边界的意思；空格之后就是单词边界了；<br>\B  匹配非单词边界；非单词边界；<br>\O  查找NUL字符；<br>\n  查找换行符；<br>\f  查找换页符；<br>\r  查找回车符；<br>\t  查找制表符；<br>\v  查找垂直制表符；<br>\xxx    查找以八进制数xxx规定的字符；<br>\xdd    查找以十六进制dd规定的字符；<br>\uxxxx  查找以十六进制数xxxx规定的Unicode字符；<br>eg：<br><code>var reg = /[\u5000-\u6000]/g;var str = &quot;邓宝宝&quot;；  邓u90df  宝u5d00str.match(reg);</code><br>结果为：”宝”  “宝” ；</p><h1 id="贪心匹配原则：正则表达式能匹配多个就不匹配少个。"><a href="#贪心匹配原则：正则表达式能匹配多个就不匹配少个。" class="headerlink" title="贪心匹配原则：正则表达式能匹配多个就不匹配少个。"></a>贪心匹配原则：正则表达式能匹配多个就不匹配少个。</h1><p><strong>量词：</strong><br>n+    匹配人格包含至少一个n的字符串；<br>n*    匹配任何包含零个或多个n的字符串；<br>n?    匹配任何包含零个或一个n的字符串；<br>n{X}   匹配包含X个n的序列的字符串；<br>n{X,Y}  匹配包含X至Y个n的序列的字符串；<br>n{X,}   匹配包含至少X个b的序列的字符串；<br>n$      匹配任何结尾为n的字符串；<br>^n      匹配任何开头为n的字符串；<br>?=n     匹配任何其后紧接指定字符串n的字符串；<br>?!n     匹配任何其后没有紧接指定字符串n的字符串；</p><p><code>var reg = /^abc$/g;var str = &quot;abcabc&quot;str.match(reg);</code></p><p>返回结果：null;</p><h1 id="写一个正则表达式，检验字符串首尾是否含有数字？"><a href="#写一个正则表达式，检验字符串首尾是否含有数字？" class="headerlink" title="写一个正则表达式，检验字符串首尾是否含有数字？"></a>写一个正则表达式，检验字符串首尾是否含有数字？</h1><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">reg</span> = /(^\<span class="keyword">d</span>)|(\<span class="keyword">d</span>$)/gi;</span><br><span class="line"><span class="keyword">var</span> str = '123abc321';</span><br><span class="line">str.<span class="built_in">match</span>(<span class="keyword">reg</span>);  或  <span class="keyword">reg</span>.<span class="keyword">test</span>(str);</span><br></pre></td></tr></table></figure><p>返回结果为：true；</p><h1 id="写一个正则表达式，检验字符串首和尾是否含有数字？"><a href="#写一个正则表达式，检验字符串首和尾是否含有数字？" class="headerlink" title="写一个正则表达式，检验字符串首和尾是否含有数字？"></a>写一个正则表达式，检验字符串首和尾是否含有数字？</h1><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">reg</span> = /^\<span class="keyword">d</span>[\s\S]*\<span class="keyword">d</span>$/<span class="keyword">g</span>;   表达全集的方法有很多哦~</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"123abc           \n def321"</span>;</span><br><span class="line">str.<span class="built_in">match</span>(<span class="keyword">reg</span>);   或   <span class="keyword">reg</span>.<span class="keyword">test</span>(str);</span><br></pre></td></tr></table></figure><h1 id="RegExp-对象上的一些属性：（reg-属性）"><a href="#RegExp-对象上的一些属性：（reg-属性）" class="headerlink" title="RegExp 对象上的一些属性：（reg.属性）"></a>RegExp 对象上的一些属性：（reg.属性）</h1><p>global：  RegExp对象是否具有标志g。 返回值为：true或者false<br>ignoreCase:  RegExp对象是否具有标志i。<br>lastIndex： 一个整数，标示开始下一次匹配的字符位置。<br>multiline： RegExp对象是否具有标志m。<br>source: 正则表达式的源文本。  能把本源打出来。</p><h1 id="RegExp-对象上的方法：（reg-方法）"><a href="#RegExp-对象上的方法：（reg-方法）" class="headerlink" title="RegExp 对象上的方法：（reg.方法）"></a>RegExp 对象上的方法：（reg.方法）</h1><p>compile: 编译正则表达式。（没用）<br>exec： 检索字符串中指定的值。返回找到的值，并确定其位置。execute执行CEO中的E。和str上的match方法有点儿相似。不加全局匹配g的话就完全一样了。加上g才上这个方法的实际用处。这个方法使用时重复调用一次一次匹配才能体现出来哦~  内部能够识别游标的位置。reg.lastIndex 就是游标的位置，输出结果就是当前游标的位置。这个方法就是给exec这个方法用的。可以手动改游标的位置。必须有全局匹配g。没有g游标不会动的。</p><p><code>var reg = /a/g;var str = &quot;ababab&quot;;console.log(reg.exec(str));</code><br>结果为:[“a”, index: 0, input: “ababab”]<br><code>console.log(reg.lastIndex);</code>输出当前游标位置；<br>结果为：1<br><code>console.log(reg.exec(str));</code><br>结果为:[“a”, index: 2, input: “ababab”]<br>console.log(reg.lastIndex); 输出当前游标位置；<br>结果为：3<br><code>console.log(reg.exec(str));</code><br>结果为:[“a”, index: 4, input: “ababab”]<br><code>console.log(reg.lastIndex);</code>输出当前游标位置；<br>结果为：5</p><p><strong>test：</strong> 检索字符串中指定的值。返回true 或 false。</p><h1 id="支持正则表达式的String对象上的方法：（str-方法）"><a href="#支持正则表达式的String对象上的方法：（str-方法）" class="headerlink" title="支持正则表达式的String对象上的方法：（str.方法）"></a>支持正则表达式的String对象上的方法：（str.方法）</h1><p>search： 检索与正则表达式相匹配的值。查找位置的方法，返回的是调用该方法的位置，没有的话返回-1。<br><code>var reg = /abc/g;var str = &quot;123abcd&quot;;str.search(reg);</code></p><h1 id="—–-gt-子表达式"><a href="#—–-gt-子表达式" class="headerlink" title="()—–&gt;  子表达式"></a>()—–&gt;  子表达式</h1><p><code>var reg = /abc(d)/g;</code>  能把子表达式中记录的内容通过match的方法返回出来；<br><code>var str = &quot;123abcd&quot;;</code><br><code>console.log(str.match(reg))</code>打印出来的结果比在控制台里调试str.match(reg)<br>的结果要多一点儿(多了满足条件是光标的索引，也就是search方法，还有就是str全部的信息)。因为console会返回这个类数组的全部信息。<code>str.match(reg)</code>只是返回这个方法的实际结果。<br>这个返回的结果中就包括有子表达式的内容。<br><strong>match： 找到一个或多个正则表达式的匹配。</strong></p><p><strong>replace： 替换与正则表达式匹配的子串。</strong></p><p><code>var str = &quot;xyyx&quot;;str.replace(&#39;x&#39;, &#39;a&#39;);</code><br>这个是把字符串中的第一个x替换成a；不过改变的不是原来的字符串哦~ 因为原来的字符串是原始值，任何原始值都是不可改变的，这里又用到了包装类的知识点哦~系统内部隐式创建一个字符串但是用完就删除了，没有了，找不到了。这里的话只能通过console.log(str.replace(‘x’, ‘a’))查看这个方法。结果为：ayyx。那这么说的话这个方法还有用处吗？有用啊，可以var一个变量保存啊。匹配的只有一个哦~这里没有全局匹配的功能，没有加g的功能。想要全变了，可以用正则表达式写console.log(str.replace(/x/g, ‘a’));结果为：ayya。</p><h1 id="写一个正则表达式把原来的-xxyy-形式的-对调过来成为-yyxx的形式。"><a href="#写一个正则表达式把原来的-xxyy-形式的-对调过来成为-yyxx的形式。" class="headerlink" title="写一个正则表达式把原来的 xxyy 形式的 对调过来成为 yyxx的形式。"></a>写一个正则表达式把原来的 xxyy 形式的 对调过来成为 yyxx的形式。</h1><p><code>var reg = /(\w)\1(\w)\2/g;</code><br><code>var str = &quot;123aabb321&quot;;</code><br><code>console.log(str.replace(reg, &#39;$2$2$1$1&#39;));</code><br>结果为: “123bbaa321”<br>这里的$1代表的就是第一个子表达式引用到的内容，$2就是第二个子表达式引用到的内容。单独$什么也不是哦~   第二个参数还能填一个函数，例如：<code>console.log(str.replace(reg, function($, $1, $2){}))</code>，系统怕单纯的正则不够你用所以就给你用函数来调用满足一些复杂的要求，所以这个函数最后返回的一定还是一个字符串，系统内部给你写好了传的参数，你直接传进去就行。function中的参数第一个用$代替一下，是正则表达式匹配到的整体内容。第二个参数$1就是第一个子表达式的内容，$2就是第二个子表达式的内容。</p><h1 id="把命名的名称改成小驼峰式写法；"><a href="#把命名的名称改成小驼峰式写法；" class="headerlink" title="把命名的名称改成小驼峰式写法；"></a>把命名的名称改成小驼峰式写法；</h1><p><code>var str = &quot;the-first-name&quot;;var reg = /-(\w)/g;console.log(str.replace(reg, function ($, $1) {  return $1.toUpperCase();}));</code><br>打印结果为：theFirstName;</p><p>写出一个正则表达式满足xxyy形式的方法：这个时候必须用到子表达式了。(\w)\1 这个是第一个位置的子表达式，代表的意义就是对第一个字子表达式的重复引用。(\w)\2 这个是第二个位置的子表达式，代表的意义就是对第二个子表达式的重复引用。所以xxyy形式的正则表达式形式如下：<br><code>var reg = /(\w)\1(\w)\2/g;var str = &quot;aabbccdddddddd&quot;;str.match(reg);</code><br>控制台打印结果：(3)[“aabb”, “ccdd”, “dddd”];从当前光标所在位置继续查找下一位的。</p><p>写出一个正则表达式满足 xyyx 的形式。<br><code>var reg = /(\w)(\w)\2\1/g;var str = &quot;abbabccd&quot;;console.log(str.match(reg));</code><br>控制台打印结果为：(2)[“abba”];  看清楚了小伙子~</p><p><code>var reg = /(\w)(\w)\2\1\2\1/g;var str = &quot;abbabadeeded&quot;;console.log(str.match(reg));</code><br>控制台打印结果为：(2)[“abbaba”, “deeded”];</p><h1 id="一对方法来回转换："><a href="#一对方法来回转换：" class="headerlink" title="一对方法来回转换："></a>一对方法来回转换：</h1><p> 字符串上的方法：<br>split(‘-‘):  把字符串分割为字符串数组。默认是逗号。</p><p> 数组上的方法：<br>join(‘-‘): 把数组中的每一项的值按照所给定的符号分成字符串。默认是逗号。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt; 正则表达式：&lt;/strong&gt; &lt;excerpt in index | 首页摘要&gt;&lt;/excerpt&gt;&lt;/p&gt;
&lt;h1 id=&quot;正则表达式-就是个规则-是个对象&quot;&gt;&lt;a href=&quot;#正则表达式-就是个规则-是个对象&quot; class=&quot;headerlink&quot;
      
    
    </summary>
    
      <category term="学习笔记" scheme="https://indexcode.cn/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="JavaScript" scheme="https://indexcode.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>框架</title>
    <link href="https://indexcode.cn/2017/11/%E6%A1%86%E6%9E%B6.html"/>
    <id>https://indexcode.cn/2017/11/框架.html</id>
    <published>2019-04-13T07:26:18.738Z</published>
    <updated>2019-04-13T07:26:18.739Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 框架：</strong> <excerpt in index | 首页摘要></excerpt></p><h2 id="React"><a href="#React" class="headerlink" title="React"></a>React</h2><p>react:是Facebook开发的一款JS框架。<br>传统页面从服务器获取数据，显示到浏览器上，用户输入数据传入服务器的时候，随着数据量大增大，越来越难以维护。Facebook认为MVC无法满足他们的扩展需求，由于他们非常巨大的代码库和庞大的组织，使得MVC很快变得非常复杂，每当需要添加一项新的功能或特性时，系统的复杂度就成级数增长，只是代码变得催乳和不可预测，结果导致他们的MVC正在土崩瓦解。认为MVC不适合大规模应用，当系统中有很多的模型和相应的视图时，其复杂度就会迅速扩大，非常难以理解和调试。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt; 框架：&lt;/strong&gt; &lt;excerpt in index | 首页摘要&gt;&lt;/excerpt&gt;&lt;/p&gt;
&lt;h2 id=&quot;React&quot;&gt;&lt;a href=&quot;#React&quot; class=&quot;headerlink&quot; title=&quot;React&quot;&gt;&lt;/a&gt;React&lt;
      
    
    </summary>
    
      <category term="个人随笔" scheme="https://indexcode.cn/categories/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="框架" scheme="https://indexcode.cn/tags/%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>杂记</title>
    <link href="https://indexcode.cn/2017/11/%E6%9D%82.html"/>
    <id>https://indexcode.cn/2017/11/杂.html</id>
    <published>2019-04-13T07:26:18.737Z</published>
    <updated>2019-04-13T07:26:18.738Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 杂记：</strong> <excerpt in index | 首页摘要><br>减肥就等于健康，健康不只是你一个人的事情，你的健康对你的家人的影响有时候要远远大于对你自身的影响。所以从现在做起就好好的对自己的健康负责吧！</excerpt></p><p>认识到人的身体更适应最原始的食物，比如说：水果、绿色蔬菜、豆类、种子、鸡蛋、海产品、纯奶制品等等；而不是随后产生的食物，比如说：谷物、过量喂食的动物产生的肉和化学加工食物等等。</p><p>为什么要减肥：现代社会流行的肥胖、糖尿病和阳痿等问题说明了。今天人类已经违背了人类发展的自然规律。</p><p>减肥必须要养成良好的作息规律：最最重要的是–&gt;我们需要生活周期，这个包括行动和不行动，比如说：清醒和睡眠，警觉和放松，运动和休息，少量饮食和过量饮食，任何因为不断的压力和长期不断的进食（一天进食多次）产生的周期破坏，都会给人类身体的适应生存的能力和表现产生不利的影响。<br>总之，如今人类健康每况愈下，主要是因为：</p><ol><li>每天吃太多的顿数</li><li>不饿的时候也要吃</li><li>吃不应该吃的食物</li><li>在运动和休息之间无法平衡</li><li>对环境和食物供应变化的适应能力较差</li></ol><h2 id="勇士减肥法："><a href="#勇士减肥法：" class="headerlink" title="勇士减肥法："></a>勇士减肥法：</h2><p>勇士减肥法：勇士减肥法是一个三周减肥方案，为了达成个人的减肥目标而特别设定的如下三个步骤：<br>第一步：排毒期，改善身体的排毒的能力，从而帮助肝脏中和那些引起增肥的物质。<br>第二步：适应脂肪燃料期，改进身体，利用脂肪作为能量来源的能力。<br>第三步：适应碳水燃料期，改进身体，利用碳水作为能量的能力。<br>这三步将帮助你，改进你的新陈代谢能力，让你的身体燃脂能力产生质的飞跃。<br>这个方案通过每个阶段不同的饮食方案，指导减肥者启动身体的生存模式，迫使身体去适应和改进利用【碳水和脂肪】燃烧的能力，重建细胞组织，燃烧脂肪和抵抗压力，从而变得更加强壮，更精瘦，更坚韧，这只要通过几个【限制吃】和【放开吃】循环来控制。</p><p>【限制吃】：基于轻断食原理，这个部分在白天（工作时间）执行，要求你进食最少的食物，集中精力避免每次摄入过多的食物，同时也要满足自己的饥饿感，这个部分，你应该吃新鲜的蔬菜和水果，沙拉和一些蛋白质（参考后面的周饮食计划明细）</p><p>【放开吃】：基于“饮食规则”（见后面），这个部分给你足够的自由，让你想吃多少就吃多少，可以吃各种不同口味的食物，但是要知道自己主动停止进食，或者当你感觉到非常舒服的被满足之后，或者当你的饥渴大于饥饿的时候。</p><p>这个方法的原则非常简单明了，这可以作为你一生的饮食方式，你可以根据自己的情况，在这三个步骤中不断的循环，这样你可以吃到你喜欢的食物，同时，你也可以平衡你的新陈代谢，轻松甩掉你的脂肪。</p><p>达到的效果：<br>你不断的燃脂，脂肪不会再生<br>你活力四射<br>你思维更加敏捷<br>你能完成更多的工作<br>自我感觉更加良好<br>看起来更有自信，更加好<br>生活对你就像一场让人兴奋的挑战</p><h2 id="勇士饮食法则："><a href="#勇士饮食法则：" class="headerlink" title="勇士饮食法则："></a>勇士饮食法则：</h2><ol><li>一开始摄入精致美味的食物，比如沙拉、蔬菜、蛋白质，然后摄入高能食物，比如说碳水化合物。</li><li>在你的正餐中，你可以享用所有你喜欢的口味，风味，口感，颜色的食物。</li><li>如果你感觉你更渴了（相对于你的饥饿感），停止进食。</li></ol><p>注意点：<br>.推荐你在吃完一部分正餐之后，休息二十分钟，给自己足够的时间来接受饱腹感的信号，如果20分钟后，你还感觉到饥饿，你可以继续吃。<br>.尽量选择有机食品，特别是牛奶和肉类，避免毒素，化工品和杀虫剂，这些对于减肥和健康都不利。</p><p>勇士减肥法，十条法令：</p><ol><li>白天限制进食</li><li>晚上吃正餐</li><li>摄入必要的营养物质（维他命、矿物质、EFA、氨基酸、益生菌）</li><li>在你的正餐中，你可以享用所有你喜欢的口味，风味，口感，颜色的食物</li><li>前几天，限制动物类食物，排毒</li><li>高蛋白，高脂肪，高碳水，循环</li><li>尽量避免，激素类、杀虫剂、化学添加剂、糖精、代糖、加工葡萄糖等</li><li>不要单独吃碳水</li><li>避免下列错误的食物组合：（1）谷物和糖（2）淀粉、脂肪和糖（3）坚果和谷物（4）碳水和酒精</li><li>给你的身体氨基酸，比如说肉毒碱，半胱氨酸，牛磺酸等</li></ol><h1 id="具体的饮食计划部分："><a href="#具体的饮食计划部分：" class="headerlink" title="具体的饮食计划部分："></a>具体的饮食计划部分：</h1><p>第一步：排毒<br>第一步的主要目的是身体排毒，为了以后的消脂最大化。<br>第一周，你将减少动物类食物，除了一些奶制品和鸡蛋外。<br>白天：限制吃<br>从你起床后就开始到最后晚餐结束，可以根据你自己的作息时间调整，比如说，你5:00点起床，你会睡得很早，你可以根据自己的时间设计自己的一天饮食。</p><p>一天综述：<br>白天【限制吃】期间，不要吃动物蛋白（肉类，鱼类），可以适当吃一些水果，蔬菜，一点点奶制品，也可以吃水煮的熟鸡蛋。</p><p>注意：【限制吃】不代表要进入饥饿状态，你可以每一个小时都吃一些可以吃的食物，不要让你的身体觉得你在剥夺他进食的权利。</p><p>早上：1-2杯室温的水，1个水果（后面有水果清单）咖啡/茶（无糖、可以加点奶）<br>上午：1个水果，或者鲜榨果蔬汁（胡萝卜汁，胡萝卜甜菜，欧芹，芹菜混合汁，原味酸奶，水煮鸡蛋，牛奶，意大利乳清干奶酪或干酪）<br>中午：清汤一碗，沙拉（绿叶蔬菜，西红柿，辣椒，洋葱，黄瓜，蘑菇，豆芽等）、煮熟的鸡蛋（可选）、沙拉调味品：橄榄油，醋（一丢丢，不要白醋）<br>下午茶：酸奶或牛奶或胡萝卜汁或水果</p><p>提示：任何时候你都可以用水果代替沙拉，清汤和鸡蛋。</p><p>晚上【放开吃】<br>晚餐（正餐）：沙拉（必须先吃），沙拉调味品：橄榄油，醋（一丢丢）<br>蒸熟的蔬菜（很多的西兰花，菜花，小洋白菜，西葫芦，胡萝卜，秋葵，蘑菇，菠菜，洋葱）</p><p>豆类（主要蛋白质来源） 推荐小扁豆，绿豆，黑豆，四季豆，鹰嘴豆，毛豆<br>谷物（主要碳水来源） 推荐菰米，黑米，大麦，藜麦，此阶段不要吃小麦。<br>你也可以用一种鹰嘴豆泥和芝麻酱的混合物。</p><p>注意：全麦和豆类的比例是1:1；<br>你也可以加各种芝士，酸奶或者鸡蛋。<br>喝点咖啡和茶没有关系，可以适当加点奶<br>推荐你在吃完一部分正餐之后，休息二十分钟，给自己足够的时间来接受饱腹感的信号，如果而是分钟后，你还感觉到饥饿，你可以继续吃。</p><p>第一周禁止进食所有的糖类食物，可以用日常补剂（后面有补剂清单）<br>运动员最好在锻炼后，是加上恢复餐，比如说酸奶和香蕉，勇士能量棒，或者牛奶。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt; 杂记：&lt;/strong&gt; &lt;excerpt in index | 首页摘要&gt;&lt;br&gt;减肥就等于健康，健康不只是你一个人的事情，你的健康对你的家人的影响有时候要远远大于对你自身的影响。所以从现在做起就好好的对自己的健康负责吧！&lt;/excerpt&gt;&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="个人随笔" scheme="https://indexcode.cn/categories/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="杂" scheme="https://indexcode.cn/tags/%E6%9D%82/"/>
    
  </entry>
  
  <entry>
    <title>有感而记</title>
    <link href="https://indexcode.cn/2017/11/%E6%9C%89%E6%84%9F%E8%80%8C%E8%AE%B0.html"/>
    <id>https://indexcode.cn/2017/11/有感而记.html</id>
    <published>2019-04-13T07:26:18.736Z</published>
    <updated>2019-04-13T07:26:18.737Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 有感而记：</strong> <excerpt in index | 首页摘要></excerpt></p><h2 id="个人随笔："><a href="#个人随笔：" class="headerlink" title="个人随笔："></a>个人随笔：</h2><p>突然想到当下的中国，我们这一代人真的是太幸福了，刚才看了《美国最可恨的女人》这部电影，看到了真实的一个美国女人，作为一个五六十年代的无神论者，就那么单枪匹马的与全世界为敌，而且那么的不幸运，一辈子也没有遇见的自己的另一半，在自己毕业之后先后遇见了两次渣男，并且都怀了一次孕，虽然父母也不支持自己生下来这两个孩子，但是她还是毅然决然的生下来了两个儿子，完全没有顾忌自己的糟糕的状况。当时的美国的默认国教就是基督教。因为美国是政教分离的政策，大多数人都是信仰基督教，还有剩下的少部分人是信仰的伊斯兰教，但归根结底的这些教徒都是信仰上帝的存在的。就连历任的美国总统都是说的是愿上帝保护美国！所以美国的民众怎么可以忍受的了别人所说的没有上帝的存在呢？她还是一个有着高学历的法律专业毕业的高材生，她明明可以不管不顾的做一个睁一只眼闭一只眼生活的普通女性，但是她没有，她说既然没有人发声，为什么不能是我呢？她没有作为一个碌碌无为的旁观者，而是站起来并且站在了最显眼的地方，发出了自己的声音，她知道她这样做会带来什么样的后果，但是她还是做了！我为这样一个敢于追求自己心中所发出的声音而奋斗的女性致敬。虽然她在发声之后就成立一个无神论协会，并且在成立协会之后就开始了自己的一点儿小私心，以帮助弱者的名义把募集到的资金占为己有。但是这样更加的体现了作为一个女性作为一个普通人，人性中的弱点，更加的真实了。总之，我很羡慕这样一个坚强的女性，不畏强权，敢于发出自己的声音的这种精神，并且用自己的血肉之躯面对整个国家的力量也丝毫不退缩的勇气。</p><p>优秀的人真是太多太多了，最可恨的是他们还非常的努力！你还能继续忍下去吗？你再不努力奔跑，那你以后怎么孝敬父母，怎么给你爱的人幸福呢？没有伞的孩子必须努力奔跑！加油吧！你不聪明，你也没有后台，你只有靠着你自己的努力一点一点的积累吧！没有什么事情是可以一步就完成的，不积跬步无以至千里，不积小流无以成江河！从现在就开始认真的做每一件事情吧！好吗？<br>树欲静而风不止，子欲养而亲不待！在这个最应该奋斗的年纪，如果堕落了，在本该奋斗的时间你用来休养生息了，那么就算父母有时间等你来孝敬，你有什么本事、你有什么能力、你拿什么东西来孝敬生你养你为你付出一切的父母呢？你啊，老大不小了，这些事情不需要别人非要来说给你听你才知道吧？你从高中第一次毕业没考上一所满意的高等学校的时候就应该很清楚的吧！现在你都大三、马上就要大四了，中间四年多过去了，你自己想想你在这些年里干了些什么有意义的事情呢？舒舒坦坦的过了这么些年也该为自己之后的人生规划一下了吧。记住不要成为别人眼中的失败者，不要成为别人口中的无用之人，更不要成为自己看不起的那类人，不要成为连自己都讨厌的人。努力吧！少年！<br>父母望子成龙，爷爷奶奶希望自己的孩子们幸福快乐，但是谁也帮不了你，只有你自己能救你自己啊，为了家人的寄望、为了亲人的盼望，千万不要成为一个无知、傲慢、懒惰、虚荣、嫉妒、懦弱的失败者！<br>既然目标是那遥远的地平线，就只顾风雨兼程！奔跑吧!摔倒了也要咬紧牙继续前行，记住你的前行路上没有人能扶你一把，没有人能拉你一下，没有人会给你帮助，就算你的腿瘸了，你也只能靠自己踉跄前行！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt; 有感而记：&lt;/strong&gt; &lt;excerpt in index | 首页摘要&gt;&lt;/excerpt&gt;&lt;/p&gt;
&lt;h2 id=&quot;个人随笔：&quot;&gt;&lt;a href=&quot;#个人随笔：&quot; class=&quot;headerlink&quot; title=&quot;个人随笔：&quot;&gt;&lt;/a&gt;个人随笔
      
    
    </summary>
    
      <category term="个人随笔" scheme="https://indexcode.cn/categories/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="影视人生" scheme="https://indexcode.cn/tags/%E5%BD%B1%E8%A7%86%E4%BA%BA%E7%94%9F/"/>
    
  </entry>
  
  <entry>
    <title>从星巴克的商业模式中看出几个问题</title>
    <link href="https://indexcode.cn/2017/11/%E6%98%9F%E5%B7%B4%E5%85%8B.html"/>
    <id>https://indexcode.cn/2017/11/星巴克.html</id>
    <published>2019-04-13T07:26:18.735Z</published>
    <updated>2019-04-13T07:50:08.302Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 从星巴克的商业模式中看出几个问题：</strong> <excerpt in index | 首页摘要></excerpt></p><h1 id="天下熙熙，皆为利来；天下攘攘，皆为利往。"><a href="#天下熙熙，皆为利来；天下攘攘，皆为利往。" class="headerlink" title="天下熙熙，皆为利来；天下攘攘，皆为利往。"></a>天下熙熙，皆为利来；天下攘攘，皆为利往。</h1><p>最近这几天看到好几条关于星巴克的新闻。讲的是星巴克一年买出40亿+的咖啡，最后的咖啡纸杯的去向，你知道吗？出于好奇，我点开看了看这条向我的手机推送的新闻，点开之后本来想着匆匆浏览一遍就好，但是看了开头就把我的兴趣给提了起来，越看越有趣。给大家一个链接，想看的可以去看看哈~但是我觉得有趣并不能保证你看后也觉得有趣啊~<a href="https://36kr.com/p/5097923.html">星巴克40亿纸杯背后</a><br>这篇新闻中让我动容的不是星巴克的不作为和为了利益不择手段的做法。而是一些人们为了保护环境而自发的组织在一起，并且为了让星巴克减少污染环境而做出的种种努力！他们其中有的人专门为星巴克做了详细的纸杯新材料的设计和开发并且考虑到了与星巴克原先纸杯的经济对比问题，怕的就是星巴克不采取他们的这种最环保的纸杯材料的建议。还有一些人是星巴克的管理层，他们为了地球的环保事业而加入星巴克的环保部门，他们在星巴克的发展历程中发挥了及其重要的作用，但是当他们知道了他们并不能促使星巴克最高领导层接受他们使用最新环保材料纸杯时，毅然决然的选择辞去星巴克中高层管理者的职位。我看到的是这些人发光的目标或者说是崇高的信仰，他们追求的或许在有些人看来是不可思议的，但是我觉得这才是真正的为了自己的追求而不惜付出巨大代价的牺牲精神。<br>也许再过十几年或者用不了这么长的时间，我们自己的国家也会有一群这样的人，他们不会为了自己的利益而做出什么苟且之事，他们胸中含着崇高的社会使命感，高度的社会责任意识，到那个时候，我相信我们的社会一定会变得更加美好。</p><h1 id="公司的管理层"><a href="#公司的管理层" class="headerlink" title="公司的管理层"></a>公司的管理层</h1><p>我想到了吴晓波收集资料总结出来的《大败局》中说到的，中国式企业家，当然了，大败局中总结的是中国改革开放早期到21世纪初的优秀企业家们，他总结到，这些企业家们在处理个人事情和与人交往上，表现出的高情商和高素质让人印象深刻，一点儿都没有那种盛气凌人的气势和让人感到不自如的时候，他们是让人在他们面前很轻松。但是他们在企业活动中所表现出来的雷厉风行和铁血无情也是让别的企业胆寒心颤啊！这种在不同的情景下的两种状态让人感到陌生的同时也让人反思，难道企业家都是这样的吗？不是的，那时的中国的企业发展环境造就了他们这种企业家；那个时候是中国企业发展的黄金期，一个企业家的领头人有多大的胆子有多大，那这个企业的发展规模就能到哪一步！在企业经营中的铁血无情体现的让人心惊胆颤。<br>回过头再来看看国外的企业家是什么样子的，他们或许也是为了利益会动用铁血手段，但是他们有商业的底线。污染地球的环境对他们来说就是不可接受的底线之一了。从这儿看来我们中国的企业家还有很多的路要走啊。</p><h1 id="公司发展"><a href="#公司发展" class="headerlink" title="公司发展"></a>公司发展</h1><p>大公司都是由小公司发展起来的，在小公司发展之初，人们都不会怎么关注的。而一旦小公司过了一个发展高峰并且成长为一个业界的领导者的时候，进入公众的目光之中，那么这个公司高层所做的一切决定都会暴露在大庭广众之下，必须要能受得住人们的指指点点，决不能有特别大的背离道德方面的商业活动，一个公司的企业形象可能就会因为一个小小的道德问题而崩塌，到时候那这个公司不论体量如何，都会成为人们所唾骂的对象，不得不说的是，人们是非常喜欢传一些风言风语的，绯闻，小道消息等等都是人们所感兴趣的内容，一旦你公司的一个决定成为了带有负面信息的内容，那么你就要接受群众们对你的唾骂挑战。而这个时候及时迅速的管理公关活动可能就相当的重要了，必须及时控制住时态的发展，采用有利的公关活动挽留公司形象的崩塌。</p><h1 id="一个商人必须要有坚持的东西–即商业底线"><a href="#一个商人必须要有坚持的东西–即商业底线" class="headerlink" title="一个商人必须要有坚持的东西–即商业底线"></a>一个商人必须要有坚持的东西–即商业底线</h1><p>一个唯利是图的商人是走不远的，看如今的大公司的领头人，无一不是在乎当下的蝇头小利之人，他们都有长远的规划，立足高远才能预测更长远的路径。追求高远才能长存的道理，人们都懂。但是实施起来的难度并没有几个人知道，而且在看得见的利益面前，能忍受的了的人更是所剩无几，一般人们都会被当下的蝇头小利所迷惑，走不了太长远；当得到了当下的小利润时，都会自满而忘记了前进的步伐，被竞争者迎头追上并且打压的好恶还手之力。所以一个优秀的企业家必须要懂得克制，不能只顾眼前的利润，而要从长远来看，追求要高远，这样企业才能长存。底线对一个企业家来说更是如此，不能为了当下的目标而不择手段的截取用户的价值，毫无底线的企业总是失败的最彻底的企业。就算侥幸存活下来，也是让同行的小企业看不起的，自然也是逃脱不掉被淘汰的结局。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt; 从星巴克的商业模式中看出几个问题：&lt;/strong&gt; &lt;excerpt in index | 首页摘要&gt;&lt;/excerpt&gt;&lt;/p&gt;
&lt;h1 id=&quot;天下熙熙，皆为利来；天下攘攘，皆为利往。&quot;&gt;&lt;a href=&quot;#天下熙熙，皆为利来；天下攘攘，皆为利往。&quot;
      
    
    </summary>
    
      <category term="个人感悟" scheme="https://indexcode.cn/categories/%E4%B8%AA%E4%BA%BA%E6%84%9F%E6%82%9F/"/>
    
    
      <category term="商业问题" scheme="https://indexcode.cn/tags/%E5%95%86%E4%B8%9A%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>后端网络笔记</title>
    <link href="https://indexcode.cn/2017/11/%E5%90%8E%E7%AB%AF%E7%BD%91%E7%BB%9C%E7%AC%94%E8%AE%B0.html"/>
    <id>https://indexcode.cn/2017/11/后端网络笔记.html</id>
    <published>2019-04-13T07:26:18.734Z</published>
    <updated>2019-04-13T07:26:18.734Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 后端网络笔记：</strong> <excerpt in index | 首页摘要></excerpt></p><h2 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h2><p>浏览器也就是客户端，在浏览器中输入网址（URL）。浏览器会从输入的网址找相应的地址，而网站中所有存在的数据都在服务器中存着的。所以上网其实也就是从服务器中请求资源的过程，当然了具体的肯定不会这么简单的。<br>在网上搜索 萨德 。就会在网址的URL上出现wd=萨德的字样。<br>注册一个账号，账号就保存在每个对应公司的数据库。百度的就是百度的数据库。你用手机号注册新账号的时候，就会去公司的数据库里面查找看一下数据库里面有没有这个手机号，这就是数据交互的过程。</p><p>浏览器–&gt;服务器–&gt;数据库       三位一体才形成了一体的系统。</p><p>Ajax的发展史：是因为谷歌地图的横空出世造就了Ajax，不用刷新页面，这是因为异步，请求资源和数据交互同时进行，所以交互体验更加的好了。</p><p>客户端向服务器发送一个请求，服务器端回应的叫响应。传统的是服务器直接返回整个页面；在Ajax模型中，数据在客户端与服务器之间独立传输，服务器不在返回整个页面。<br><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;form <span class="built_in">action</span>=<span class="string">'地址'</span> method=<span class="string">'方法'</span>&gt;</span><br><span class="line">  &lt;input <span class="built_in">type</span>=<span class="string">'test'</span> <span class="built_in">name</span>=<span class="string">'usrename'</span>&gt;</span><br><span class="line">  &lt;input <span class="built_in">type</span>=<span class="string">'password'</span> <span class="built_in">name</span>=<span class="string">'password'</span>&gt;</span><br><span class="line">  &lt;input <span class="built_in">type</span>=<span class="string">'submit'</span> value=<span class="string">'提交'</span>&gt;</span><br><span class="line"></span><br><span class="line">通过get方法点击提交按钮 浏览器就会在URL上返回这个数据，也就是地址栏，所以这个传递数据的大小也就有限制了，但是post方法返回的数据不会再地址栏上所以传递数据的大小就比get方法大好多了，大约为<span class="number">4</span>k左右。传递文件类型的需要设input的<span class="built_in">type</span>=<span class="string">'file'</span>;还有form表单的值enctype=<span class="string">'multipart/form-data</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br></pre></td></tr></table></figure></p><p>用JavaScript以异步的形式操作xml（现在操作的是json格式的，名值对的形式） 所以以前就叫Ajax（Asynchronous javascript and xml）</p><p>Ajax不阻塞页面，体验好。</p><p>Ajax对象上的方法：<br>abort()  停止当前请求<br>open(“method”,”url”,true)  建立对服务器的调用<br>send(content)  向服务器发送请求<br>getAllResponseHeaders()  把http请求的所有响应首部作为健/值对返回<br>getResponseHeaders(“headerLabel”)  返回值指定首部的串值<br>setRequestHeader(“label”,”value”)  把指定首部设置为所提供的值。在设置任何首部之前必须先调用open();</p><p>Ajax对象上的属性：<br>onreadystatechange 状态改变的事件触发器,事件监听<br>readyState   对象状态（integer）值是数字类型的 0=未初始化 1=读取中 2=已读取 3=交互中 4=完成<br>status   服务器返回的状态码，如：404=“文件未找到”、200=“成功” 500=“服务器内部错误” 304=“资源未被修改”<br>responseText  服务器进程返回数据的文本版本<br>responseXML  服务器进程返回数据的兼容DOM的XML文档对象<br>statusText  服务器返回的状态文本信息</p><p>封装一个属于我们的Ajax：<br>`var ajax = null;<br>if(window.XMLHttpRequest) {<br>  ajax = new XMLHttpRequest;<br>}else {<br>  ajax = new ActiveXObject(‘Microsoft.XMLHttp’);<br>}<br>ajax.open(‘method’,’getNews.php’,’true’);</p><p>ajax.send();<br>ajax.onreadystatechange = function() {<br>  if(ajax.readyState == 4) {<br>  if(ajax.status == 200) {<br>    ajax.responseText<br>  }<br>  }<br>}`</p><p>封装Ajax：<br><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Ajax</span>(<span class="params">method, url, flag, data, callBack</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> app = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">window</span>.XMLHttpRequest) &#123;</span><br><span class="line">    app = <span class="keyword">new</span> XMLHttpRequest;</span><br><span class="line">  &#125;<span class="title">else</span> &#123;</span><br><span class="line">    app = <span class="keyword">new</span> ActiveXObject(<span class="string">'Microsoft.XMLHttp'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> method = method.toUpperCase();</span><br><span class="line">  <span class="keyword">if</span>(method == <span class="string">'GET'</span>) &#123;</span><br><span class="line">    app.open(<span class="string">'method'</span>, <span class="built_in">url</span> + <span class="string">'?'</span> + data, flag);</span><br><span class="line">    app.send();</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(method == <span class="string">'POST'</span>) &#123;</span><br><span class="line">    app.open(method, <span class="built_in">url</span>, flag);</span><br><span class="line">    app.setRequestHeader(<span class="string">'Content-type'</span>, <span class="string">'application/x-www-form-urlencoded'</span>);</span><br><span class="line">    app.send(data);</span><br><span class="line">  &#125;</span><br><span class="line">  app.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(app.readyState == <span class="number">4</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span>(app.status == <span class="number">200</span>) &#123;</span><br><span class="line">    callBack(app.responseText);</span><br><span class="line">  &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt; 后端网络笔记：&lt;/strong&gt; &lt;excerpt in index | 首页摘要&gt;&lt;/excerpt&gt;&lt;/p&gt;
&lt;h2 id=&quot;Ajax&quot;&gt;&lt;a href=&quot;#Ajax&quot; class=&quot;headerlink&quot; title=&quot;Ajax&quot;&gt;&lt;/a&gt;Ajax&lt;
      
    
    </summary>
    
      <category term="学习笔记" scheme="https://indexcode.cn/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="后端" scheme="https://indexcode.cn/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>前端算法JavaScript代码实现</title>
    <link href="https://indexcode.cn/2017/11/%E5%89%8D%E7%AB%AF%E7%AE%97%E6%B3%95%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0.html"/>
    <id>https://indexcode.cn/2017/11/前端算法代码实现.html</id>
    <published>2019-04-13T07:26:18.733Z</published>
    <updated>2019-04-13T07:26:18.733Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 前端算法JavaScript代码实现 </strong> <excerpt in index | 首页摘要></excerpt></p><h1 id="金山WPS公司前端笔试算法题"><a href="#金山WPS公司前端笔试算法题" class="headerlink" title="金山WPS公司前端笔试算法题"></a>金山WPS公司前端笔试算法题</h1><p>今天是金山WPS公司在哈尔滨理工大学举办宣讲会的日子，宣讲会结束之后就进行了前端开发工程师的笔试。虽然我参加的宣讲会不多，做的笔试题更少，但是以前参加的每家公司出的笔试题都不是纯前端的题，总是会参杂一些计算机系统、数据库等等方面的知识，而今天做的这个笔试题却是纯前端的题，并且还都是前端基础题；虽然是基础题，看着这些题都知道甚至可以很熟练的运用，但是真正做起题来还是有点儿拿捏不准。归根结底还是自己的基础功不扎实啊，做起题来才知道自己还欠缺还多底层知识的理解。总之，还是应该多看书、多追究底层实现的原理，不能仅仅追求熟练运用，而应该懂得这是如何实现的。前路漫漫，还得更加努力才行啊！加油吧，少年~</p><p>说了这么多，说一下遇到的问题吧，最后一道编程题的解题思路和答案。</p><p>问题：实现两个有序数组的合并。</p><p><code>function merge(left, right) {    var lLen = left.length,        rLen = right.length,        il = 0,        ir = 0,        res = [],        mid = [];    while(il &lt; lLen &amp;&amp; rl &lt; rLen) {        if(left[il] &gt; right[ir]) {            res.push(right[ir++])        }else{            res.push(left[il++])        }    }    mid = left[il] ? left.slice(il) : right.slice(ir);    return res.concat(mid);}</code><br>很简单的就实现了两个有序数组的合并。<br>是不是很简单呢？</p><h1 id="JavaScript算法"><a href="#JavaScript算法" class="headerlink" title="JavaScript算法"></a>JavaScript算法</h1><p>既然说到排序了，那我们就来说一下JavaScript的排序算法的代码实现吧！</p><ol><li>冒泡排序<br>最最基础的是什么算法呢？当然是众所周知的冒泡排序算法了~<br>那就先来实现一下它吧！</li></ol><p><code>function bubbleSort(arr) {    var len = arr.length;    for(let i = 0; i &lt; len; i++) {        for(let j = 0; j &lt; len - 1 - i; j++) {            if(arr[j] &gt; arr[j+1]) {                var temp = arr[j];                arr[j] = arr[j+1];                arr[j+1] = temp;            }        }    }    return arr;}</code><br>用代码实现了冒泡排序，我们现在回过头来看看冒泡排序的时间复杂度吧~首先，冒泡排序用到的排序方法是穷举算法，也就是每一个数都要两两进行比较。这可以说是最容易让人理解的算法了，但是简单易懂换回的是计算机的处理效率的大大下降。因为计算量是很大的，所以这个算法的时间复杂度也是最大的；所以学习这个算法的目的也就是让我们去避免用到它，用高效的算法来替代它。<br>时间复杂度：O(n²)的时间复杂度。</p><ol start="2"><li>选择排序<br>选择排序是表现最稳定的排序算法之一了，与冒泡排序一样用到的都是穷举算法。<br>代码如下：</li></ol><p><code>function selectionSort(arr){    var len = arr.length;    var minIndex, temp;    for(let i = 0; i &lt; len - 1; i++) {        minIndex = i;        for(let j = i + 1; j &lt; len; j++) {            if(arr[j] &lt; arr[minIndex]) {                minIndex = j;            }        }        temp = arr[i];        arr[i] = arr[minIndex];        arr[minIndex] = temp;    }    return arr;}</code></p><p>与冒泡排序的方法类似，但是这个是从头开始排列的；应该尽量避免使用这个算法，因为这个也是最浪费性能的一个算法。<br>时间复杂度：O(n²)的时间复杂度。</p><ol start="3"><li>插入排序<br>插入排序：类似打布克牌的时候新起上的牌放到手中已有的有序队列中；从当前手中牌的末尾开始比较，插入满足条件的位置中。<br>代码如下：</li></ol><p><code>funciton insertionSort(arr) {    var len = arr.length;    var perIndex, current;    for(let i = 1; i &lt; len; i++) {        preIndex = i - 1;        current = arr[i];        while(preIndex &gt;= 0 &amp;&amp; arr[preIndex] &gt; current) {            arr[preIndex + 1] = arr[preIndex];            preIndex--;        }        arr[preIndex + 1] = current;    }    return arr;}</code></p><p>插入算法的时间复杂度：最差的情况下为O(n²)，即等于冒泡排序和选择排序的复杂度，但是一般不可能是最差的情况的，所以这个算法想比骄傲前两个来说性能上稍微提高了一点儿。既是时间复杂度&lt;=O(n²)。</p><ol start="4"><li>希尔排序<br>希尔排序：是插入排序的一种更高效的实现；它与插入排序的不同之处在于，他会优先比较距离较远的元素。希尔排序的核心在于间隔排序的设定。既可以提前设定好间隔序列，也可以动态的定义间隔序列。动态定义间隔序列的算法是《算法（第4版）》的合著者Robert Sedgewick提出的。在这里，我就是用了这种方法。<br>代码如下：</li></ol><p><code>function shellSort(arr) {    var len = arr.length,        temp,        gap =  1;    while(gap &lt; len / 3) {        gap = gap * 3 + 1;    }    for(gap; gap &gt; 0; gap = Math.floor(gap / 3)) {        for(let i = gap; i &lt; len; i++) {            temp = arr[i];            for(var j = i - gap; j &gt; 0 &amp;&amp; arr[j] &gt; temp; j -= gap) {                arr[j + gap] = arr[j];            }            arr[j + gap] = temp;        }    }    return arr;}</code></p><p>时间复杂度：相比较上一种方法-插入排序，希尔排序自己定义好了间隔序列，这样就手动的排除了插入排序中最差的可能发生概率，进一步至少减少了1/4的比较运算相对于冒泡和选择排序而说。所以这是一种较优的算法。这个算法用到的思想就有点儿归并排序算法的影子了。接下来就让我们来看下一种算法-归并排序吧~</p><ol start="5"><li>归并排序（合并排序）<br>作为一种典型的分而治之的算法思想，归并排序的实现有两种方法：<br>-自上而下的递归（递归方法可以用迭代重写）<br>-自下而上的迭代</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt; 前端算法JavaScript代码实现 &lt;/strong&gt; &lt;excerpt in index | 首页摘要&gt;&lt;/excerpt&gt;&lt;/p&gt;
&lt;h1 id=&quot;金山WPS公司前端笔试算法题&quot;&gt;&lt;a href=&quot;#金山WPS公司前端笔试算法题&quot; class=&quot;he
      
    
    </summary>
    
      <category term="算法" scheme="https://indexcode.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="笔试" scheme="https://indexcode.cn/tags/%E7%AC%94%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>前端基础题总结</title>
    <link href="https://indexcode.cn/2017/11/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E9%A2%98%E6%80%BB%E7%BB%93.html"/>
    <id>https://indexcode.cn/2017/11/前端基础题总结.html</id>
    <published>2019-04-13T07:26:18.732Z</published>
    <updated>2019-04-13T07:26:18.732Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前端基础题总结</strong> <excerpt in index | 首页摘要></excerpt></p><h3 id="1-行内元素和快级元素"><a href="#1-行内元素和快级元素" class="headerlink" title="1. 行内元素和快级元素"></a>1. 行内元素和快级元素</h3><p>inline： <code>&lt;span&gt;&lt;/span&gt;,&lt;strong&gt;&lt;/strong&gt;,&lt;em&gt;&lt;/em&gt;,&lt;a&gt;&lt;/a&gt;,&lt;del&gt;&lt;/del&gt;</code>;<br>block:  <code>&lt;p&gt;&lt;/p&gt;,&lt;ol&gt;&lt;/ol&gt;,&lt;li&gt;&lt;/li&gt;,&lt;ul&gt;&lt;/ul&gt;,&lt;div&gt;&lt;/div&gt;,&lt;form&gt;&lt;/form&gt;,&lt;adress&gt;&lt;/adress&gt;&lt;table&gt;&lt;/table&gt;&lt;h1-6&gt;</code>;<br>行内元素转化为块级元素：display : block;</p><h3 id="2-css代码三中引入方式："><a href="#2-css代码三中引入方式：" class="headerlink" title="2. css代码三中引入方式："></a>2. css代码三中引入方式：</h3><pre><code>行间样式页面级css引入css文件 linkstyle标签下写 @import url();</code></pre><h3 id="3-web标准：行为、样式、结构相分离"><a href="#3-web标准：行为、样式、结构相分离" class="headerlink" title="3. web标准：行为、样式、结构相分离"></a>3. web标准：行为、样式、结构相分离</h3><h3 id="4-简化代码："><a href="#4-简化代码：" class="headerlink" title="4. 简化代码："></a>4. 简化代码：</h3><figure class="highlight plain"><figcaption><span>type</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">margin: 0 10px;</span><br><span class="line">padding: 0;</span><br><span class="line">&#125;</span><br><span class="line">#content&#123;</span><br><span class="line">background:#ffffff;</span><br><span class="line">&#125;</span><br><span class="line">#content div&#123;</span><br><span class="line">font-size: 14px;</span><br><span class="line">text-align: center;</span><br><span class="line">color: #e9e9e9;</span><br><span class="line">&#125;</span><br><span class="line">#nav&#123;</span><br><span class="line">background-color: #e0e0e0;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="5-浏览器中margin默认值为8px；"><a href="#5-浏览器中margin默认值为8px；" class="headerlink" title="5. 浏览器中margin默认值为8px；"></a>5. 浏览器中margin默认值为8px；</h3><h3 id="6-盒模型的计算："><a href="#6-盒模型的计算：" class="headerlink" title="6. 盒模型的计算："></a>6. 盒模型的计算：</h3><figure class="highlight plain"><figcaption><span>lang</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;liangxi&lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">body&#123;</span><br><span class="line">padding: 0;</span><br><span class="line">margin: 0;</span><br><span class="line">&#125;</span><br><span class="line">#my-defined&#123;</span><br><span class="line">width: 100px;</span><br><span class="line">height: 100px;</span><br><span class="line">padding: 0 100px;</span><br><span class="line">margin: 10px 20px 30px 40px;</span><br><span class="line">border: 1px solid orange;</span><br><span class="line">background: orange;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;my-defined&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>html中orange颜色的区域宽度是302px<br>orange区域距离页面左边40px，上10px</p><h3 id="7-用css、html编写一个两列布局的页面，要求右侧宽度为200px；左侧自动扩展。"><a href="#7-用css、html编写一个两列布局的页面，要求右侧宽度为200px；左侧自动扩展。" class="headerlink" title="7. 用css、html编写一个两列布局的页面，要求右侧宽度为200px；左侧自动扩展。"></a>7. 用css、html编写一个两列布局的页面，要求右侧宽度为200px；左侧自动扩展。</h3><figure class="highlight plain"><figcaption><span>lang</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;liangxi&lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">.right&#123;</span><br><span class="line">float: right;</span><br><span class="line">width: 200px;</span><br><span class="line">height: 100px;</span><br><span class="line">background:red; </span><br><span class="line">&#125;</span><br><span class="line">.left&#123;</span><br><span class="line">height: 100px;</span><br><span class="line">margin-right: 200px;</span><br><span class="line">background: black;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=&quot;right&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;left&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="8-居中一个浮动元素："><a href="#8-居中一个浮动元素：" class="headerlink" title="8. 居中一个浮动元素："></a>8. 居中一个浮动元素：</h3><div class="wrap"><br>    <div id="my-defined"></div><br></div><figure class="highlight plain"><figcaption><span>type</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 第一种方法： --&gt;</span><br><span class="line">.wrap &#123;</span><br><span class="line">position: relative;</span><br><span class="line">height: 1000px;</span><br><span class="line">width: 100%;</span><br><span class="line">&#125;</span><br><span class="line">.wrap #my-defined&#123;</span><br><span class="line">position: absolute;</span><br><span class="line">width: 300px;</span><br><span class="line">height: 500px;</span><br><span class="line">left: 50%;</span><br><span class="line">right: 50%;</span><br><span class="line">margin-left: -150px;</span><br><span class="line">margin-top: -250px;</span><br><span class="line">background-color: #ccc;</span><br><span class="line">&#125;</span><br><span class="line">&lt;!-- 第二种方法： --&gt;</span><br><span class="line">.wrap&#123;</span><br><span class="line">position: relative;</span><br><span class="line">height: 1000px;</span><br><span class="line">width: 100%;</span><br><span class="line">&#125;</span><br><span class="line">.wrap #my-defined&#123;</span><br><span class="line">position: absolute;</span><br><span class="line">width: 300px;</span><br><span class="line">height: 500px;</span><br><span class="line">top: 50%;</span><br><span class="line">left: 50%;</span><br><span class="line">transform: translate(-50%, -50%);</span><br><span class="line">background-color: #ccc;</span><br><span class="line">&#125;</span><br><span class="line">&lt;!-- 第三种方法： --&gt;</span><br><span class="line">.wrap&#123;</span><br><span class="line">display: flex;</span><br><span class="line">width: 100%;</span><br><span class="line">height: 1000px;</span><br><span class="line">justify-content: center;</span><br><span class="line">align-items: center;</span><br><span class="line">&#125;</span><br><span class="line">.wrap #my-defined&#123;</span><br><span class="line">height: 500px;</span><br><span class="line">width: 300px;</span><br><span class="line">background-color: #ccc;</span><br><span class="line">&#125;</span><br><span class="line">&lt;!-- 第四种方法： --&gt;</span><br><span class="line">.wrap&#123;</span><br><span class="line">position: relative;</span><br><span class="line">width: 100%;</span><br><span class="line">height: 1000px;</span><br><span class="line">&#125;</span><br><span class="line">.wrap #my-defined&#123;</span><br><span class="line">position: absolute;</span><br><span class="line">top: 0;</span><br><span class="line">left: 0;</span><br><span class="line">bottom: 0;</span><br><span class="line">right: 0;</span><br><span class="line">margin: auto;</span><br><span class="line">background-color: #ccc;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="9-画出下图示意图："><a href="#9-画出下图示意图：" class="headerlink" title="9. 画出下图示意图："></a>9. 画出下图示意图：</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>liangxi<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-id">#page</span>&#123;</span></span><br><span class="line"><span class="undefined">width: 520px;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.nav</span>&#123;</span></span><br><span class="line"><span class="css"><span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line"><span class="undefined">float: right;</span></span><br><span class="line"><span class="undefined">background: orange;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.main</span>&#123;</span></span><br><span class="line"><span class="undefined">width: 200px;</span></span><br><span class="line"><span class="undefined">float: left;</span></span><br><span class="line"><span class="undefined">padding-left: 110px;</span></span><br><span class="line"><span class="undefined">background: black;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.sub</span>&#123;</span></span><br><span class="line"><span class="undefined">width: 100px;</span></span><br><span class="line"><span class="undefined">float: left;</span></span><br><span class="line"><span class="css"><span class="selector-tag">margin</span><span class="selector-pseudo">:10px</span> 0 10<span class="selector-tag">px</span> <span class="selector-tag">-100px</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.nav</span>,<span class="selector-class">.sub</span>&#123;</span></span><br><span class="line"><span class="css"><span class="selector-tag">border</span>: 10<span class="selector-tag">px</span> <span class="selector-tag">deshed</span> <span class="selector-id">#000</span>;</span></span><br><span class="line"><span class="undefined">height: 300px;</span></span><br><span class="line"><span class="undefined">background: orange;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.sub</span>&#123;</span></span><br><span class="line"><span class="undefined">height: 280px;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"page"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sub"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"nav"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="10-form表单中method属性值及其区别："><a href="#10-form表单中method属性值及其区别：" class="headerlink" title="10. form表单中method属性值及其区别："></a>10. form表单中method属性值及其区别：</h3><pre><code>GET 使用URL 或Cookie 传参，而POST将数据，放在BODY中。GET 的URL会有长度上的限制， POST可以传输很多数据。POST比GET安全。</code></pre><p>但其实HTTP协议里没有规定POST数据就要放在BODY里， 也没有要求GET数据就一定要放在URL中而不能放在BODY中。<br>HTTP协议对GET和POST 都没有对数据的长度进行限制，两方面原因造成数据限制的原因<br>    早起浏览器会对URL长度进行限制（浏览器URL输入框）<br>    浏览器会对Content-length进行限制，这是为了服务器安全和稳定。</p><h3 id="11-去掉ul-gt-li结构中前面的圆点，并且解决li前面的空余"><a href="#11-去掉ul-gt-li结构中前面的圆点，并且解决li前面的空余" class="headerlink" title="11. 去掉ul&gt;li结构中前面的圆点，并且解决li前面的空余"></a>11. 去掉ul&gt;li结构中前面的圆点，并且解决li前面的空余</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>liangxi<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">ul &#123;</span></span><br><span class="line"><span class="undefined">height: 100px;</span></span><br><span class="line"><span class="undefined">padding: 0;</span></span><br><span class="line"><span class="undefined">list-style: none;</span></span><br><span class="line"><span class="undefined">border: 1px solid black;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="12-JavaScript中typeof可能返回的结果：number-string-boolean-object-undefined-function-symbol"><a href="#12-JavaScript中typeof可能返回的结果：number-string-boolean-object-undefined-function-symbol" class="headerlink" title="12. JavaScript中typeof可能返回的结果：number,string,boolean,object,undefined,function,symbol;"></a>12. JavaScript中typeof可能返回的结果：number,string,boolean,object,undefined,function,symbol;</h3><h3 id="13-已知数组var-arr-“goole”-”microsoft”-”oracle”-”阿里”，”freewheel”-”IBM”-”爱立信”，”百度”，”企鹅”，”美团”，”去哪儿”，”58同城”，”新浪”，”搜狐”，”大众点评”，”360”-”汽车之家”，”巨人网络”，”携程”，”4399”-”凤凰网”，”人民网”-，亲们，如果你想进前十的公司，请用效率最高的方法将此数组按照顺序链接成字符。"><a href="#13-已知数组var-arr-“goole”-”microsoft”-”oracle”-”阿里”，”freewheel”-”IBM”-”爱立信”，”百度”，”企鹅”，”美团”，”去哪儿”，”58同城”，”新浪”，”搜狐”，”大众点评”，”360”-”汽车之家”，”巨人网络”，”携程”，”4399”-”凤凰网”，”人民网”-，亲们，如果你想进前十的公司，请用效率最高的方法将此数组按照顺序链接成字符。" class="headerlink" title="13. 已知数组var arr = [“goole”,”microsoft”,”oracle”,”阿里”，”freewheel”,”IBM”,”爱立信”，”百度”，”企鹅”，”美团”，”去哪儿”，”58同城”，”新浪”，”搜狐”，”大众点评”，”360”,”汽车之家”，”巨人网络”，”携程”，”4399”,”凤凰网”，”人民网”]，亲们，如果你想进前十的公司，请用效率最高的方法将此数组按照顺序链接成字符。"></a>13. 已知数组var arr = [“goole”,”microsoft”,”oracle”,”阿里”，”freewheel”,”IBM”,”爱立信”，”百度”，”企鹅”，”美团”，”去哪儿”，”58同城”，”新浪”，”搜狐”，”大众点评”，”360”,”汽车之家”，”巨人网络”，”携程”，”4399”,”凤凰网”，”人民网”]，亲们，如果你想进前十的公司，请用效率最高的方法将此数组按照顺序链接成字符。</h3><p><code>&lt;script type=&quot;text/javascript&quot;&gt;    var arr = [&quot;goole&quot;,&quot;microsoft&quot;,&quot;oracle&quot;,&quot;阿里&quot;,&quot;freewheel&quot;,&quot;IBM&quot;,&quot;爱立信&quot;,&quot;百度&quot;,&quot;企鹅&quot;,&quot;美团&quot;,&quot;去哪儿&quot;,&quot;58同城&quot;,&quot;新浪&quot;,&quot;搜狐&quot;,&quot;大众点评&quot;,&quot;360&quot;,&quot;汽车之家&quot;,&quot;巨人网络&quot;,&quot;携程&quot;,&quot;4399&quot;,&quot;凤凰网&quot;,&quot;人民网&quot;];    console.log(arr.join(&#39;,&#39;));&lt;/script&gt;</code></p><h3 id="14-写出html、css、JavaScript注释代码形式："><a href="#14-写出html、css、JavaScript注释代码形式：" class="headerlink" title="14. 写出html、css、JavaScript注释代码形式："></a>14. 写出html、css、JavaScript注释代码形式：</h3><pre><code>html：&lt;!--   --&gt;css:/*   */js://</code></pre><h3 id="15-编写一段JavaScript脚生成下面这段DOM结构。"><a href="#15-编写一段JavaScript脚生成下面这段DOM结构。" class="headerlink" title="15. 编写一段JavaScript脚生成下面这段DOM结构。"></a>15. 编写一段JavaScript脚生成下面这段DOM结构。</h3><p><code>&lt;div class=&quot;exmple&quot;&gt;    &lt;p class=&quot;slogan&quot;&gt;成哥，你最帅!&lt;/p&gt;&lt;/div&gt;</code></p><p>JS代码如下：</p><p><code>&lt;script type=&quot;text/javascript&quot;&gt;    var $Div = document.createElement(&#39;div&#39;);    var $P = document.createElement(&#39;p&#39;);    $Div.className = &quot;exmple&quot;;    $P.className = &quot;slogan&quot;;    $Div.appendChild($P);    document.body.appendChild($div);    $P.innerHTML = &quot;成哥，你最帅！&quot;;&lt;/script&gt;</code></p><h3 id="16-为html元素绑定一个事件，如点击事件。写出兼容各个浏览器的事件绑定方法。"><a href="#16-为html元素绑定一个事件，如点击事件。写出兼容各个浏览器的事件绑定方法。" class="headerlink" title="16. 为html元素绑定一个事件，如点击事件。写出兼容各个浏览器的事件绑定方法。"></a>16. 为html元素绑定一个事件，如点击事件。写出兼容各个浏览器的事件绑定方法。</h3><p><code>&lt;script type=&quot;text/javascript&quot;&gt;    &lt;!-- 兼容各个浏览器的绑定事件： --&gt;    function addEvent(elem, type, handle){        if(elem.addEventListener){            elem.addEventListener(type, handle, false);        }else if (elem.attachEvent) {            elem[&#39;temp&#39; + type + handle] = handle;            elem[type + handle]= function (){                elem[&#39;temp&#39; + type + handle].call(elem);            };            elem.attachEvent(&#39;on&#39; + type, elem[type + handle])        }else{            elem[&#39;on&#39;+type]=handle;        }    }    &lt;!-- 兼容各个浏览器的一处绑定事件： --&gt;    function removeEvent(elem, type, handle){        if(elem.removeEventListener) {            elem.removeEventListener(type, handle, false);        }else if(elem.detachEvent) {            elem.datachEvent(‘on’ + type, elem[type + handle]);        }else {            elem[‘on’ + type] = null; //  elem[‘on’ + type] = false;        }    }&lt;/script&gt;</code></p><p>第二种方法：</p><p><code>&lt;script type=&quot;text/javascript&quot;&gt;    function addEvent(elem, type, handle){        if(elem.addEventListener){            elem.addEventListener(type, handle, false);        }else if (elem.attachEvent) {            elem[handle.name] = function () {                handle.call(elem);            };            elem.attachEvent(&#39;on&#39; + type, elem[handle.name]);        }else{            elem[&#39;on&#39;+type]=handle;        }    }    &lt;!-- 兼容各个浏览器的移除绑定事件： --&gt;    function removeEvent(elem, type, handle){        if(elem.removeEventListener) {            elem.removeEventListener(type, handle, false);        }else if(elem.detachEvent) {            elem.datachEvent(‘on’ + type, elem[handle.name]);        }else {            elem[‘on’ + type] = null; //  elem[‘on’ + type] = false;        }    }&lt;/script&gt;</code></p><h3 id="17-Call-apply-作用都是改变this指向；"><a href="#17-Call-apply-作用都是改变this指向；" class="headerlink" title="17. Call,apply:作用都是改变this指向；"></a>17. Call,apply:作用都是改变this指向；</h3><p>区别：传参的方式不同，call直接传，apply利用数组的形式传参；</p><h3 id="18-封装ajax-向服务器异步发送数据；"><a href="#18-封装ajax-向服务器异步发送数据；" class="headerlink" title="18. 封装ajax,向服务器异步发送数据；"></a>18. 封装ajax,向服务器异步发送数据；</h3><p><code>&lt;script type=&quot;text/javascript&quot;&gt;    function ajax(method, url, flag, callback, data){        var xhr = null;        if(window.XMLHttpRequest){            xhr = new window.XMLHttpRequest();        }else{            xhr = new ActiveXObject(&#39;Mirosoft.XMLHTTP&#39;);        }        var method = method.toUpperCase();  //对应的是toLowerCase()方法;        if(method === &#39;GET&#39;){            xhr.open(&#39;GET&#39;, url + &#39;?&#39; + data, flag);            xhr.send();        }else if(method === &#39;POST&#39;){            xhr.open(&#39;POST&#39;, url, flag);            xhr.setRequestHeader(&#39;content-type&#39;, &#39;application/x-www-form-urlencoded&#39;);            xhr.send(data);        }        xhr.onreadystatechange = function (){            if(xhr.readyState === 4){                if(xhr.status === 200){                    callback(xhr.responseText);                 }            }        }    }&lt;/script&gt;</code></p><h3 id="19-数组去重-eg：var-arr-‘a’-’b’-234-23-’a’-’b’-3-1-234"><a href="#19-数组去重-eg：var-arr-‘a’-’b’-234-23-’a’-’b’-3-1-234" class="headerlink" title="19. 数组去重 eg：var arr = [‘a’,’b’,234,23,’a’,’b’,3,1,234];"></a>19. 数组去重 eg：var arr = [‘a’,’b’,234,23,’a’,’b’,3,1,234];</h3><p>第一种方法：</p><p><code>&lt;script type=&quot;text/javascript&quot;&gt;    Array.prototype.unique = function () {     var arr = [],        obj = {},        len = this.length;        for(var i = 0;i &lt; len;i++){            if(!obj[this[i]]){                obj[this[i]] = &quot;11&quot;;                arr.push(this[i]);            }        }        return arr;}    var arr = [1,1,2,2,2,3,3,33,4,4,5,45,45,];    [].unique(arr);    --&gt; 结果为：[1，2，3，33，4，5，45]&lt;/script&gt;</code><br>第二种方法：<br><code>&lt;script type=&quot;text/javascript&quot;&gt;    Array.prototype.unique = function (arr) {        return new Set(arr);    }    var arr = [1,1,2,2,2,3,3,33,4,4,5,45,45,];    [].unique(arr);    --&gt; 结果为：[1，2，3，33，4，5，45]&lt;/script&gt;</code><br>第三种方法：<br><code>&lt;script type=&quot;text/javascript&quot;&gt;    Array.prototype.unique = function (arr) {        var temp = [], len = arr.length;        for(let i = 0; i &lt; len; i++) {            if(temp.indexOf(arr[i]) === -1) {                temp.push(arr[i]);            }        }        return temp;    }    var arr = [1,1,2,2,2,3,3,33,4,4,5,45,45,];    [].unique(arr);    --&gt; 结果为：[1，2，3，33，3，4，45]&lt;/script&gt;</code><br>第四种方法：<br><code>&lt;script type=&quot;text/javascript&quot;&gt;    Array.prototype.unique = function (arr) {        var temp = [], len = arr.length;        for(let i = 0; i &lt; len; i++) {            if(arr.indexOf(arr[i]) === i) {                temp.push(arr[i]);            }        }        return temp;    }    var arr = [1,1,2,2,2,3,3,33,4,4,5,45,45,];    [].unique(arr);    --&gt; 结果为：[1，2，3，33，4，5，45]&lt;/script&gt;</code><br>第五种方法：<br><code>&lt;script type=&quot;text/javascript&quot;&gt;    Array.prototype.unique = function (arr) {        var temp = [],index = [], len = arr.length;        for(let i = 0; i &lt; len; i++) {            for(let j = i + 1; j &lt; len; j++) {                if(arr[i] === arr[j]) {                    i ++ ;                    j = i;                }            }            temp.push(arr[i]);            index.push(i);        }        console.log(index);        return temp;    }    var arr = [1,1,2,2,2,3,3,33,4,4,5,45,45,];    [].unique(arr);    --&gt; 结果为：[1，2，3，33，4，5，45]&lt;/script&gt;</code></p><h3 id="20-如今有个ul，如果有十亿个li；要求点击li触发事件，弹出对应li的内容"><a href="#20-如今有个ul，如果有十亿个li；要求点击li触发事件，弹出对应li的内容" class="headerlink" title="20. 如今有个ul，如果有十亿个li；要求点击li触发事件，弹出对应li的内容"></a>20. 如今有个ul，如果有十亿个li；要求点击li触发事件，弹出对应li的内容</h3><p><code>&lt;ul&gt;    &lt;li&gt;&lt;/li&gt;&lt;/ul&gt;</code><br><code>&lt;script type=&quot;text/javascript&quot;&gt;    var oUl = document.getElementsByTagName(&#39;ul&#39;)[0];    oUl.onclick = function  (e) {        var event = e || window.event;        var target = event.target || event.srcElement;        console.log(target.innerHTML);    }&lt;/script&gt;</code></p><h3 id="21-阻止事件冒泡和事件默认时间"><a href="#21-阻止事件冒泡和事件默认时间" class="headerlink" title="21. 阻止事件冒泡和事件默认时间"></a>21. 阻止事件冒泡和事件默认时间</h3><p><code>&lt;script type=&quot;text/javascript&quot;&gt;    &lt;!-- //取消冒泡 --&gt;    function stopBubble(e) {        if(e.stopPropagation){            e.stopPropagation();        }else{            e.cancelBubble = true;        }    }         &lt;!-- //阻止默认事件 --&gt;    function  cancelHandler(e){        if(e.preventDefault){            e.preventDefault();        }else{            e.returnValue = false;        }    }&lt;/script&gt;</code></p><h3 id="22-什么是DOM："><a href="#22-什么是DOM：" class="headerlink" title="22. 什么是DOM："></a>22. 什么是DOM：</h3><p>DOM是操作css，html的一套编程接口；<br>DOM对象即为宿主对象，浏览器厂商定义的；<br>DOM定义了表示和修改文档所需的方法。<br>对html和xml编程接口不是css</p><h3 id="23-利用JavaScript取非行间样式，要求兼容性各个浏览器"><a href="#23-利用JavaScript取非行间样式，要求兼容性各个浏览器" class="headerlink" title="23. 利用JavaScript取非行间样式，要求兼容性各个浏览器"></a>23. 利用JavaScript取非行间样式，要求兼容性各个浏览器</h3><p><code>&lt;script type=&quot;text/javascript&quot;&gt;    function getComputedStyle(obj,styleProp){        if (window.getComputedStyle) {            return window.getComputedStyle(obj,false)[styleProp];        }else{            return obj.currentStyle[styleProp];        }    }&lt;/script&gt;</code></p><h3 id="24-运行test-和new-test-的结果是什么："><a href="#24-运行test-和new-test-的结果是什么：" class="headerlink" title="24. 运行test()和new test()的结果是什么："></a>24. 运行test()和new test()的结果是什么：</h3><p><code>&lt;script type=&quot;text/javascript&quot;&gt;    var a = 5;    function test(){        a=0;        alert(a);        alert(this.a);        var a;        alert(a);    }&lt;/script&gt;</code><br>结果是：0 5 0    ,    0 undefined 0</p><h3 id="25-有字符串”aaaaabbbccccddddeeefgaa”-转换为连续不重复的字符串"><a href="#25-有字符串”aaaaabbbccccddddeeefgaa”-转换为连续不重复的字符串" class="headerlink" title="25. 有字符串”aaaaabbbccccddddeeefgaa”,转换为连续不重复的字符串"></a>25. 有字符串”aaaaabbbccccddddeeefgaa”,转换为连续不重复的字符串</h3><p><code>&lt;script type=&quot;text/javascript&quot;&gt;    var str = &quot;aaaaabbbccccddddeeefgaa&quot;;    var reg = /(.)\1*/g;    console.log(str.replace(reg,&quot;$1&quot;));&lt;/script&gt;</code></p><h3 id="26-一串连续数字实现打点功能：100000000转换成：1-000-000-000"><a href="#26-一串连续数字实现打点功能：100000000转换成：1-000-000-000" class="headerlink" title="26. 一串连续数字实现打点功能：100000000转换成：1.000.000.000"></a>26. 一串连续数字实现打点功能：100000000转换成：1.000.000.000</h3><p><code>&lt;script type=&quot;text/javascript&quot;&gt;    var str = &quot;1000000000&quot;;    var reg = /(?=(\B)(\d{3})+$)/g;    console.log(str.replace(reg,&quot;.&quot;));&lt;/script&gt;</code></p><h3 id="27-写出运算结果："><a href="#27-写出运算结果：" class="headerlink" title="27. 写出运算结果："></a>27. 写出运算结果：</h3><figure class="highlight plain"><figcaption><span>type</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">alert(typeof(a))--undefined</span><br><span class="line">alert(typeof(undefined))--undefined</span><br><span class="line">alert(typeof(NaN))--number</span><br><span class="line">alert(typeof(null))--object</span><br><span class="line"></span><br><span class="line">var a = &quot;123abc&quot;;</span><br><span class="line">alert(typeof(+a));--number</span><br><span class="line">alert(typeof(!!a));--boolean</span><br><span class="line">alert(typeof(a + &quot;&quot;));--string</span><br><span class="line"></span><br><span class="line">alert(1 == &quot;1&quot;); --true</span><br><span class="line">alert(NaN == NaN); --flase</span><br><span class="line">alert(NaN == undefined);--flase</span><br><span class="line">alert(&quot;11&quot; + 11);--1111</span><br><span class="line">alert(1===&quot;1&quot;)--flase</span><br><span class="line">alert(parseInt(&quot;123abc&quot;))--123</span><br><span class="line"></span><br><span class="line">var num = 1232123.3456789;</span><br><span class="line">alert(num.toFixed(3));--1232123.346</span><br><span class="line">//toFixed只在number类型上可以用，保留几位有效数字，四舍五入</span><br><span class="line"></span><br><span class="line">// typeof(typeof(a))--string</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="28-打印当前年月时分秒"><a href="#28-打印当前年月时分秒" class="headerlink" title="28. 打印当前年月时分秒"></a>28. 打印当前年月时分秒</h3><p><code>&lt;script type=&quot;text/javascript&quot;&gt;    var date = new Date();  console.log(date.getFullYear + &quot;年&quot; + (date.getMonth() + 1) + &quot;月&quot; + date.getDate() + &quot;日&quot;+ date.getHours() + &quot;时&quot; + date.getMinutes() + &quot;分&quot; + date.getSeconds() + &quot;秒&quot;);&lt;/script&gt;</code></p><h3 id="29-css中，font-size设置的是字体的高；单位是px，em是相对值。"><a href="#29-css中，font-size设置的是字体的高；单位是px，em是相对值。" class="headerlink" title="29. css中，font-size设置的是字体的高；单位是px，em是相对值。"></a>29. css中，font-size设置的是字体的高；单位是px，em是相对值。</h3><h3 id="30-有html结构："><a href="#30-有html结构：" class="headerlink" title="30. 有html结构："></a>30. 有html结构：</h3><pre><code>`&lt;div style=&quot;background-color:red;margin:0 0 100px 0;&quot;&gt;123&lt;/div&gt;&lt;div style=&quot;background-color:red;margin:200px 0 0 0;&quot;&gt;234&lt;/div&gt;`他们之间的间距是：200px</code></pre><h3 id="31-简单说说自定义构造函数创建对象的原理："><a href="#31-简单说说自定义构造函数创建对象的原理：" class="headerlink" title="31. 简单说说自定义构造函数创建对象的原理："></a>31. 简单说说自定义构造函数创建对象的原理：</h3><pre><code>在函数的最前面隐式的加上 this = {}；最后隐式的返回 return this；</code></pre><h3 id="32-写出一种原型链实现继承的方式：圣杯模式"><a href="#32-写出一种原型链实现继承的方式：圣杯模式" class="headerlink" title="32. 写出一种原型链实现继承的方式：圣杯模式"></a>32. 写出一种原型链实现继承的方式：圣杯模式</h3><figure class="highlight plain"><figcaption><span>type</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var inherit =(function()&#123;</span><br><span class="line"></span><br><span class="line">var F = function()&#123;&#125;;</span><br><span class="line">return function(P,C)&#123;</span><br><span class="line">F.prototype = P.prototype;</span><br><span class="line">C.prototype = new F();</span><br><span class="line">C.prototype.constructor = C;</span><br><span class="line">C.prototype.uber = P.prototype;</span><br><span class="line">&#125;</span><br><span class="line">&#125;());</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="33-深度克隆："><a href="#33-深度克隆：" class="headerlink" title="33. 深度克隆："></a>33. 深度克隆：</h3><p><code>&lt;script type=&quot;text/javascript&quot;&gt;    Array.prototype.deepClone = function (parent, child) {           var child = {} || child;           var toStr = Object.prototype.toString,               arrStr = &#39;[object Array]&#39;;           for(var prop in parent){               if(parent.hasOwnProperty(prop)){                   if(typeof(parent[prop]) === &quot;object&quot;){                    child[prop] = (toStr.call(parent[prop]) === arrStr) ? []:                    {};                    deepClone(parent[prop], child[prop]);                   }else{                       child[prop] = parent[prop];                   }               }           }      }&lt;/script&gt;</code></p><h3 id="34-描述预编译过程："><a href="#34-描述预编译过程：" class="headerlink" title="34. 描述预编译过程："></a>34. 描述预编译过程：</h3><pre><code>（1）创建AO对象；（2）找形参和变量声明，将变量和形参作为AO对象的属性名，值为undefined；（3）将实参和形参相统一；（4）在函数体里找函数声明，将函数声明作为AO对象的属性名，将函数体作为赋值对象赋予函数名。</code></pre><h3 id="35-介绍js语言特点："><a href="#35-介绍js语言特点：" class="headerlink" title="35. 介绍js语言特点："></a>35. 介绍js语言特点：</h3><pre><code>单线程；脚本语言；解释性语言，解释一行执行一行；ECMA标注；弱数据类型语言；可以跨平台；</code></pre><h3 id="36-介绍主流浏览器以及他们相应的内核，介绍浏览器分为哪几部分，内核呢？"><a href="#36-介绍主流浏览器以及他们相应的内核，介绍浏览器分为哪几部分，内核呢？" class="headerlink" title="36. 介绍主流浏览器以及他们相应的内核，介绍浏览器分为哪几部分，内核呢？"></a>36. 介绍主流浏览器以及他们相应的内核，介绍浏览器分为哪几部分，内核呢？</h3><pre><code>浏览器分为：shell与内核（js引擎，渲染引擎，其他）</code></pre><p>  主流浏览器：IE（trident）；chrome（webkit/blink）；safari（webkit）；Firefox（Gecko）；Opera（presto）；</p><h3 id="37-简述js时间线的顺序："><a href="#37-简述js时间线的顺序：" class="headerlink" title="37. 简述js时间线的顺序："></a>37. 简述js时间线的顺序：</h3><pre><code>1、创建Document对象，开始解析web页面。document.readyState = &apos;loading&apos;。2、遇到link外部css，创建线程加载，并继续解析文档。3、遇到script外部js，并且没有设置async、defer，浏览器加载，并阻塞，等待js加载完成并执行该脚本，然后继续解析文档。4、遇到script外部js，并且设置有async、defer，浏览器创建线程加载，并继续解析文档。对于async属性的脚本，脚本加载完成后立即执行。（异步禁止使用document.write()）5、遇到img等，先正常解析dom结构，然后浏览器异步加载src，并继续解析文档。6、当文档解析完成，document.readyState = &apos;interactive&apos;。7、文档解析完成后（就是所有dom节点都解析完），所有设置有defer的脚本会按照顺序执行。（注意与async的不同,但同样禁止使用document.write()）;8、document对象触发DOMContentLoaded事件，这也标志着程序执行从同步脚本执行阶段，转化为事件驱动阶段。9、当所有async的脚本加载完成并执行后、img等加载完成后，document.readyState = &apos;complete&apos;，window对象触发load事件。10、从此，以异步响应方式处理用户输入、网络事件等。</code></pre><h3 id="38-异步加载js的几种方案："><a href="#38-异步加载js的几种方案：" class="headerlink" title="38. 异步加载js的几种方案："></a>38. 异步加载js的几种方案：</h3><pre><code>defer async</code></pre><p>异步加载兼容性写法：</p><figure class="highlight plain"><figcaption><span>type</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">  function asyncLoaded (url,callback) &#123;</span><br><span class="line">      var script = document.createElement(&apos;script&apos;);</span><br><span class="line">      script.type = &quot;text/javascript&quot;;</span><br><span class="line">      if (script.readySate) &#123;</span><br><span class="line">          script.onreadystatechange = function ()&#123;</span><br><span class="line">              if (script.readySate == &quot;complete&quot; || script.readySate == &quot;loaded&quot;) &#123;</span><br><span class="line">                  obj[callback]();</span><br><span class="line">                  script.onreadystatechange = null ;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;else&#123;</span><br><span class="line">          script.onload = function()&#123;</span><br><span class="line">              obj[callback]();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      script.src = url ;</span><br><span class="line">      document.head.appendChild(script);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="39-打印结果："><a href="#39-打印结果：" class="headerlink" title="39. 打印结果："></a>39. 打印结果：</h3><p><code>&lt;script type=&quot;text/javascript&quot;&gt;    var a = (10*3-4/2 + 1)%2,        b = 3;    b %= a + 3;    console.log(a++);    console.log(--b);&lt;/script&gt;</code></p><pre><code>结果：1   2</code></pre><h3 id="40-使用原生js，addEventListener-给每个li元素绑定一个click事件，输出他们的顺序。"><a href="#40-使用原生js，addEventListener-给每个li元素绑定一个click事件，输出他们的顺序。" class="headerlink" title="40. 使用原生js，addEventListener,给每个li元素绑定一个click事件，输出他们的顺序。"></a>40. 使用原生js，addEventListener,给每个li元素绑定一个click事件，输出他们的顺序。</h3><p><code>&lt;ul&gt;    &lt;li&gt;a&lt;/li&gt;    &lt;li&gt;a&lt;/li&gt;    &lt;li&gt;a&lt;/li&gt;    &lt;li&gt;a&lt;/li&gt;&lt;/ul&gt;</code></p><p><code>&lt;script type=&quot;text/javascript&quot;&gt;    var liCollection = document.getElementsByTagName(&#39;li&#39;),    len = liCollection.length;    for (var i = 0; i &lt; len; i++) {        (function(j){            liCollection[j].addEventListener(&#39;click&#39;,function(){                console.log(j);            }false);        }(i))    }&lt;/script&gt;</code></p><h3 id="41-一个字符串由-a-z-组成，找出第一个只出现一次的字母"><a href="#41-一个字符串由-a-z-组成，找出第一个只出现一次的字母" class="headerlink" title="41. 一个字符串由[a-z]组成，找出第一个只出现一次的字母"></a>41. 一个字符串由[a-z]组成，找出第一个只出现一次的字母</h3><p><code>&lt;script type=&quot;text/javascript&quot;&gt;    Array.prototype.unique = function() {     var len = this.length,         obj = {},         arr = [];     for(var i = 0; i &lt; len; i++){       if(!obj[this[i]]) {         obj[this[i]] = &quot;1&quot;;         arr.push(this[i]);       }     }     return arr;    }    var str = &quot;abaadf&quot;;    var arr = str.split(&quot;&quot;);    var arr1 = arr.unique();    console.log(arr1[0]);&lt;/script&gt;</code></p><h3 id="42-打印结果："><a href="#42-打印结果：" class="headerlink" title="42. 打印结果："></a>42. 打印结果：</h3><p><code>&lt;script type=&quot;text/javascript&quot;&gt;    var name = &quot;222&quot;;    var a = {        name:&quot;111&quot;,        say:function(){            console.log(this.name);        }    }    var fun = a.say;    fun();    a.say();    var b = {        name:&quot;333&quot;,        say:function(fun){            fun();        }    }    b.say(a.say);    b.say=a.say;    b.say();&lt;/script&gt;</code></p><p>结果： 222  111  222  333</p><h3 id="43-原始值"><a href="#43-原始值" class="headerlink" title="43. 原始值"></a>43. 原始值</h3><p><code>&lt;script type=&quot;text/javascript&quot;&gt;    var str = &quot;你成哥很帅&quot;;    str.length = 3;    console.log(str);    &lt;/script&gt;</code></p><p>执行结果为：你成哥很帅<br>原因：原始值不可改变</p><h3 id="44-请用多种方法创造对象："><a href="#44-请用多种方法创造对象：" class="headerlink" title="44. 请用多种方法创造对象："></a>44. 请用多种方法创造对象：</h3><pre><code>字面量 var obj = {}；构造函数 var obj = new Object{};var obj = Object.create(原型)</code></pre><h3 id="45-解决污染全局变量"><a href="#45-解决污染全局变量" class="headerlink" title="45. 解决污染全局变量"></a>45. 解决污染全局变量</h3><pre><code>命名空间，闭包</code></pre><h3 id="46-枚举一个对象中所有自有属性："><a href="#46-枚举一个对象中所有自有属性：" class="headerlink" title="46. 枚举一个对象中所有自有属性："></a>46. 枚举一个对象中所有自有属性：</h3><figure class="highlight plain"><figcaption><span>type</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  Person.prototype.lastName = &quot;ji&quot;;</span><br><span class="line"></span><br><span class="line">  function Person(name,age)&#123;</span><br><span class="line">    this.name  = name;</span><br><span class="line">    this.age = age ;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  var oPerson = new Person (&apos;cheng&apos;,123);</span><br><span class="line">  for(var prop in oPerson)&#123;</span><br><span class="line">    if(oPerson.hasOwnProperty(prop))&#123;</span><br><span class="line">    console.log(oPerson[prop]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="47-让数组里的数据从大到小排列："><a href="#47-让数组里的数据从大到小排列：" class="headerlink" title="47. 让数组里的数据从大到小排列："></a>47. 让数组里的数据从大到小排列：</h3><p><code>&lt;script type=&quot;text/javascript&quot;&gt;    arr.sort(function(a,b){        return a - b;    }());&lt;/script&gt;</code></p><h3 id="48-es5严格模式如何使用，应该注意些什么："><a href="#48-es5严格模式如何使用，应该注意些什么：" class="headerlink" title="48. es5严格模式如何使用，应该注意些什么："></a>48. es5严格模式如何使用，应该注意些什么：</h3><p><code>&lt;script type=&quot;text/javascript&quot;&gt;全局严格模式:直接加 字符串：&quot;use strict&quot;;局部函数内严格模式（推荐）function test(){    &quot;use strict&quot;;}注意：不支持with,arguments.callee,func.caller,变量赋值前必须声明，局部this必须被赋值(Person.call(null/undefined) 赋值什么就是什么),拒绝重复属性和参数&lt;/script&gt;</code></p><h3 id="49-选择html元素节点几种方法，以及他们各自的兼容性问题及特点："><a href="#49-选择html元素节点几种方法，以及他们各自的兼容性问题及特点：" class="headerlink" title="49. 选择html元素节点几种方法，以及他们各自的兼容性问题及特点："></a>49. 选择html元素节点几种方法，以及他们各自的兼容性问题及特点：</h3><p><code>&lt;script type=&quot;text/javascript&quot;&gt;        getElementsByTagName()[0];        getElementById();        getElementsByName();        getElementByClassName(); interactive8及以下不兼容        querySelectorAll();非实时ie7及以下不兼容        querySelector();非实时ie7及以下不兼容    1.getElementById方法定义在Document.prototype上，即Element节点上不能使用。    2.getElementsByName方法定义在HTMLDocument.prototype上，即非html中的document以外不能使用(xml document,Element)    3.getElementsByTagName方法定义在Document.prototype 和 Element.prototype上    4.HTMLDocument.prototype定义了一些常用的属性，body,head,分别指代HTML文档中的&lt;body&gt;&lt;head&gt;标签。    5.Document.prototype上定义了documentElement属性，指代文档的根元素，在HTML文档中，他总是指代&lt;html&gt;元素    6.getElementsByClassName、querySelectorAll、querySelector在Document,Element类中均有定义&lt;/script&gt;</code></p><h3 id="50-说出节点类型的值为1-2-3-8-9的值对应的节点是什么："><a href="#50-说出节点类型的值为1-2-3-8-9的值对应的节点是什么：" class="headerlink" title="50. 说出节点类型的值为1,2,3,8,9的值对应的节点是什么："></a>50. 说出节点类型的值为1,2,3,8,9的值对应的节点是什么：</h3><p>元素节点   —— 1<br>属性节点   —— 2<br>文本节点   —— 3<br>注释节点   —— 8<br>document  —— 9 单独成一类 文档节点<br><!-- DocumentFragment  ——  11 文档碎片 --><br><!-- 获取节点类型   nodeType  --></p><h3 id="51-鼠标事件的触发顺序："><a href="#51-鼠标事件的触发顺序：" class="headerlink" title="51. 鼠标事件的触发顺序："></a>51. 鼠标事件的触发顺序：</h3><pre><code>mousedown; focus; mouseup; click;右键事件：`&lt;script type=&quot;text/javascript&quot;&gt;    elem.onmousedown = function (e) {    if(e.button == 2){        alert(&quot;右键点击&quot;)    }}&lt;/script&gt;`</code></pre><h3 id="52-数据格式JSON转换为字符串，以及把字符串转换为JSON的方法"><a href="#52-数据格式JSON转换为字符串，以及把字符串转换为JSON的方法" class="headerlink" title="52. 数据格式JSON转换为字符串，以及把字符串转换为JSON的方法"></a>52. 数据格式JSON转换为字符串，以及把字符串转换为JSON的方法</h3><p><code>&lt;script type=&quot;text/javascript&quot;&gt;    JSON.parse();  string — &gt; json字符串JSON.stringify();   json — &gt; string&lt;/script&gt;</code></p><h3 id="53-BOM对象及其功能："><a href="#53-BOM对象及其功能：" class="headerlink" title="53. BOM对象及其功能："></a>53. BOM对象及其功能：</h3><pre><code>Window     JavaScript 层级中的顶层对象，表示浏览器窗口。    属性：        closed    返回窗口是否已被关闭。        document    对 Document 对象的只读引用。        history    对 History 对象的只读引用。        innerheight    返回窗口的文档显示区的高度。        innerwidth    返回窗口的文档显示区的宽度。    方法：        alert()    显示带有一段消息和一个确认按钮的警告框。        blur()    把键盘焦点从顶层窗口移开。        clearInterval()    取消由 setInterval() 设置的 timeout。 Navigator  包含客户端浏览器的信息。    属性：        appCodeName    返回浏览器的代码名。     方法：        javaEnabled()    规定浏览器是否启用 Java。Screen     包含客户端显示屏的信息。     属性：        availHeight    返回显示屏幕的高度 (除 Windows 任务栏之外)。        availWidth    返回显示屏幕的宽度 (除 Windows 任务栏之外)。        width    返回显示器屏幕的宽度。History    包含了浏览器窗口访问过的 URL。     属性：        length    返回浏览器历史列表中的 URL 数量。    方法：        back()    加载 history 列表中的前一个 URL。        forward()    加载 history 列表中的下一个 URL。        go()    加载 history 列表中的某个具体页面。Location   包含了当前 URL 的信息。    属性：        href    设置或返回完整的 URL。    方法：        assign()    加载新的文档。        reload()    重新加载当前文档。        replace()    用新的文档替换当前文档。</code></pre><h3 id="54-说明position定位的值有什么区别，如果有不能兼容的问题，如何解决"><a href="#54-说明position定位的值有什么区别，如果有不能兼容的问题，如何解决" class="headerlink" title="54. 说明position定位的值有什么区别，如果有不能兼容的问题，如何解决"></a>54. 说明position定位的值有什么区别，如果有不能兼容的问题，如何解决</h3><pre><code>absolute 绝对定位relative 相对定位fixed     相对可视区定位，而且脱离原来位置 ie6不能用sticky回去查一查</code></pre><h3 id="55-添加css代码使得ul外观可以包住li："><a href="#55-添加css代码使得ul外观可以包住li：" class="headerlink" title="55. 添加css代码使得ul外观可以包住li："></a>55. 添加css代码使得ul外观可以包住li：</h3><figure class="highlight plain"><figcaption><span>type</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">ul&#123;</span><br><span class="line">list-style: none;</span><br><span class="line">padding: 0;</span><br><span class="line">&#125;</span><br><span class="line">ul&gt;li&#123;</span><br><span class="line">float: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ul:after&#123;</span><br><span class="line">content:&quot;&quot;;</span><br><span class="line">display:inline-block;</span><br><span class="line">clear:both;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><code>&lt;ul&gt;    &lt;li&gt;&lt;/li&gt;    &lt;li&gt;&lt;/li&gt;    &lt;li&gt;&lt;/li&gt;&lt;/ul&gt;</code></p><h3 id="56-熟知的选择优先级关系（权重）"><a href="#56-熟知的选择优先级关系（权重）" class="headerlink" title="56. 熟知的选择优先级关系（权重）"></a>56. 熟知的选择优先级关系（权重）</h3><pre><code>！important            无穷大style（行间样式）    1000id                    100class/属性/伪类        10标签/伪元素            1通配符*                0</code></pre><h3 id="57-display值及含义"><a href="#57-display值及含义" class="headerlink" title="57. display值及含义"></a>57. display值及含义</h3><p>display值： inline—行级元素，不沾满整行，不可以改变宽高<br>            block—-块级元素 沾满整行 可以改变宽高<br>            inline-block—-行级块元素 不占满整行 可以改变宽高 </p><h3 id="58-写一个输入框，带有js功能，鼠标聚焦提示消息信息，失去焦点显示提示信息"><a href="#58-写一个输入框，带有js功能，鼠标聚焦提示消息信息，失去焦点显示提示信息" class="headerlink" title="58. 写一个输入框，带有js功能，鼠标聚焦提示消息信息，失去焦点显示提示信息"></a>58. 写一个输入框，带有js功能，鼠标聚焦提示消息信息，失去焦点显示提示信息</h3><figure class="highlight plain"><figcaption><span>type</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">input&#123;</span><br><span class="line">border: 1px solid black;</span><br><span class="line">color: #999;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.fontGrey&#123;</span><br><span class="line">color: #999;</span><br><span class="line">&#125;</span><br><span class="line">.fontNormal&#123;</span><br><span class="line">color: #424242;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">username:&lt;input tyoe=&quot;text&quot; value=&quot;请输入用户名&quot;onfocus=&quot;if(this value=&apos;请输入用户名&apos;)&#123;this.value=&apos;&apos;;this.className=&apos;fontNormal&apos;&#125;&quot;onblur=&quot;if(this.value==&apos;&apos;)&#123;this.value=&apos;请输入用户名&apos;;this.className=&apos;fontGrey&apos;&#125;&quot; onchange=&quot;console.log(this.value)&quot;&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h3 id="59-写出打印结果并说明原因："><a href="#59-写出打印结果并说明原因：" class="headerlink" title="59. 写出打印结果并说明原因："></a>59. 写出打印结果并说明原因：</h3><p><code>&lt;script type=&quot;text/javascript&quot;&gt;    function fn(a,b){        arguments[0] = 1;        console.log(a);        fn(2,1);    }    打印：1;    原因：实参，形参相统一;&lt;/script&gt;</code></p><h3 id="60-将下列变量转化为小驼峰形式：my-first-name-gt-myFirstName"><a href="#60-将下列变量转化为小驼峰形式：my-first-name-gt-myFirstName" class="headerlink" title="60. 将下列变量转化为小驼峰形式：my-first-name-&gt;myFirstName"></a>60. 将下列变量转化为小驼峰形式：my-first-name-&gt;myFirstName</h3><p><code>&lt;script type=&quot;text/javascript&quot;&gt;    var str = &quot;my-first-name&quot;;    var reg =/-(\w)/g;    var test = str.replace(reg,function($,$1){        return $1.toUpperCase();    });    console.log(test);&lt;/script&gt;</code></p><h3 id="61-将aaaaabbbb字符串调换成bbbbaaaa形式"><a href="#61-将aaaaabbbb字符串调换成bbbbaaaa形式" class="headerlink" title="61. 将aaaaabbbb字符串调换成bbbbaaaa形式"></a>61. 将aaaaabbbb字符串调换成bbbbaaaa形式</h3><p><code>&lt;script type=&quot;text/javascript&quot;&gt;    var str = &quot;aaaabbbb&quot;;     var reg = /(\w{4})(\w{4})/g;     console.log(str.replace(reg,&quot;$2$1&quot;));&lt;/script&gt;</code></p><p>说一下你对前端的理解.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;前端基础题总结&lt;/strong&gt; &lt;excerpt in index | 首页摘要&gt;&lt;/excerpt&gt;&lt;/p&gt;
&lt;h3 id=&quot;1-行内元素和快级元素&quot;&gt;&lt;a href=&quot;#1-行内元素和快级元素&quot; class=&quot;headerlink&quot; title=&quot;1.
      
    
    </summary>
    
      <category term="学习笔记" scheme="https://indexcode.cn/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="JavaScript" scheme="https://indexcode.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>人生启迪</title>
    <link href="https://indexcode.cn/2017/11/%E4%BA%BA%E7%94%9F%E5%90%AF%E8%BF%AA%E5%8F%91%E4%BA%BA%E6%B7%B1%E7%9C%81.html"/>
    <id>https://indexcode.cn/2017/11/人生启迪发人深省.html</id>
    <published>2019-04-13T07:26:18.730Z</published>
    <updated>2019-04-13T07:26:18.731Z</updated>
    
    <content type="html"><![CDATA[<h2 id="影视人生-人生启迪"><a href="#影视人生-人生启迪" class="headerlink" title="影视人生-人生启迪"></a>影视人生-人生启迪</h2><p><strong> 人生启迪：</strong> <excerpt in index | 首页摘要><br>动情美剧：This Is Us</excerpt></p><p>启迪电影：Cloud Atlas （演员：汤姆汉克斯、哈利贝瑞、雨果维文、周迅  导演：汤姆提克威、拉娜沃卓斯基）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;影视人生-人生启迪&quot;&gt;&lt;a href=&quot;#影视人生-人生启迪&quot; class=&quot;headerlink&quot; title=&quot;影视人生-人生启迪&quot;&gt;&lt;/a&gt;影视人生-人生启迪&lt;/h2&gt;&lt;p&gt;&lt;strong&gt; 人生启迪：&lt;/strong&gt; &lt;excerpt in index 
      
    
    </summary>
    
      <category term="个人随笔" scheme="https://indexcode.cn/categories/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="影视人生" scheme="https://indexcode.cn/tags/%E5%BD%B1%E8%A7%86%E4%BA%BA%E7%94%9F/"/>
    
  </entry>
  
  <entry>
    <title>绑定事件</title>
    <link href="https://indexcode.cn/2017/11/%E4%BA%8B%E4%BB%B6.html"/>
    <id>https://indexcode.cn/2017/11/事件.html</id>
    <published>2019-04-13T07:26:18.729Z</published>
    <updated>2019-04-13T07:26:18.729Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 绑定事件：</strong> <excerpt in index | 首页摘要></excerpt></p><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><h3 id="如何绑定事件："><a href="#如何绑定事件：" class="headerlink" title="如何绑定事件："></a>如何绑定事件：</h3><ol><li>ele.onxxx = function (event) {}<br>兼容性很好，但是一个元素只能绑定一个处理程序<br>基本等同于写在HTML行间上</li><li>obj.addEventListener(type, fn, false);<br>IE9以下不兼容，可以为一个事件绑定多个处理程序</li><li>obj.attachEvent(‘on’ + type, fn);<br>IE独有，一个事件同样可以绑定多个处理程序</li></ol><h3 id="事件处理程序的运行环境："><a href="#事件处理程序的运行环境：" class="headerlink" title="事件处理程序的运行环境："></a>事件处理程序的运行环境：</h3><ol><li>ele.onxxx = function (event){}<br>程序this指向是dom元素本身</li><li>obj.addEventListener(type, fn, false);<br>程序this指向是dom元素本身</li><li>obj.attachEvent(‘on’ + type, fn);<br>程序this指向window</li></ol><p>2有需要注意的地方：虽然这个方法可以绑定多个处理程序，但是也得看是怎么绑定的：<br> <code>var oDiv = document.getElementsByTagName(div)[0]; oDiv.addEventListener(&#39;click&#39;, function() {   alert(0); }, false); oDiv.addEventListener(&#39;click&#39;, function() {   alert(1); }, false);</code><br>这样的结果就是：先弹窗为0，在弹窗为1；  因为绑定的事件处理函数不是同一个事件处理函数，绑定的事件处理函数是多个事件处理函数时，绑定多少个事件处理函数就会执行多少次这个所绑定的事件处理函数，并且无论这个是否是同一事件类型。 </p><p> <code>var oDiv = document.getElementsByTagName(div)[0],     test = function(){    alert(0);     };</code><br> oDiv.addEventListener(‘click’, test, false);<br>这样的结果就是： 只弹窗一次0；  因为绑定的事件处理函数是同一个就是test处理函数。总结：同一dom元素绑定同一事件类型而且是同一个处理函数的时候，只执行所绑定的test处理函数一次！！！</p><p>事件处理模型：事件冒泡和事件捕获（这两个方法的切换也就是addEventListener这个方法的第三个参数的false和true的切换）<br>事件冒泡：结构上的由于最内部的dom结构触发事件处理函数，但是这个处理函数会往上冒泡，直到冒泡到最祖先层次才会结束。但是必须要绑定这个事件的处理函数。往上冒泡就是必须是同一个事件处理函数才能自动往上触发父级或者更高级的同样绑定的同一事件类型的处理函数。<br>这俩个方法的区别就是触发事件的先后顺序发生了改变，事件冒泡是才从里往外，顾名思义也就像鱼儿从水底吐泡向水上冒泡一样，从dom结构上来说就是从子级往父级和更高级的父级关系上发生的事件处理模型。而捕获从事件发生的顺序上跟冒泡正好相反，这两个方法也就是事件发生顺序上的这点区别而已。如果这两个方法都有的话，是先捕获在冒泡的。与写代码的顺序无关，IE并没有捕获，只有冒泡。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt; 绑定事件：&lt;/strong&gt; &lt;excerpt in index | 首页摘要&gt;&lt;/excerpt&gt;&lt;/p&gt;
&lt;h2 id=&quot;事件&quot;&gt;&lt;a href=&quot;#事件&quot; class=&quot;headerlink&quot; title=&quot;事件&quot;&gt;&lt;/a&gt;事件&lt;/h2&gt;&lt;h3 id
      
    
    </summary>
    
      <category term="学习笔记" scheme="https://indexcode.cn/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="JavaScript" scheme="https://indexcode.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>计算机发展+Git简单使用+markdown简单语法</title>
    <link href="https://indexcode.cn/2017/11/%E4%B8%93%E4%B8%9A%E5%BF%85%E5%A4%87%E6%8A%80%E8%83%BD.html"/>
    <id>https://indexcode.cn/2017/11/专业必备技能.html</id>
    <published>2019-04-13T07:26:18.728Z</published>
    <updated>2019-04-13T07:50:08.301Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 计算机发展+Git简单使用+markdown简单语法：</strong> <excerpt in index | 首页摘要></excerpt></p><h1 id="计算机的发展历程："><a href="#计算机的发展历程：" class="headerlink" title="计算机的发展历程："></a>计算机的发展历程：</h1><p>电子数字计算机是一种能够自行按照已设定的程序进行数据处理的电子设备；是软件与硬件相结合、面向系统、侧重应用的自动化求解工具。<br>世界上第一台电子数字计算机ENIAC在1946年诞生于美国；短短70年计算机技术迅猛发展，从科学计算、数据处理等应用领域，迅速扩展到实时控制、辅助设计、智能模拟等诸多领域。今天计算机无所不在~~</p><p>1946年，我们使用电子真空管制造计算机，机器语言编程主要应用于科学计算。<br>1956年，出现了晶体管，制造出了第二代计算机，批处理控制成为一种操作计算机的主要方式，进而也出现了高级计算机语言Fortan语言用于科学计算/COBOL语言应用于数据处理；应用领域也扩展到数据处理领域。<br>1959年，集成电路的出现，多道程序的概念得以实施；进而操作系统/数据库管理系统/高级语言程序等一系列的系统软件成组产生；应用领域得到了进一步的扩展。<br>1976年，大规模集成电路/超大规模集成电路相继面世；计算机向快速化、小型化、系统化、网络化、智能化等方面快速发展。<br>1980年，微型计算机概念出现了；计算机的廉价化进一步促进了应用领域的快速膨胀。<br>1990年，图形化人机交互技术面世；计算机使用的友善化推动了应用人群的快速扩展。<br>2003年，移动计算机的出现，是的计算机进一步发展，使得现在计算机无处不在。</p><h2 id="计算机系统的组成："><a href="#计算机系统的组成：" class="headerlink" title="计算机系统的组成："></a>计算机系统的组成：</h2><p>计算机系统：包括硬件子系统和软件子系统<br>硬件：借助光、电、磁、机械等原理构成的各种物理部件的有机组合，是系统工作的实体。 —CPU，主存储器，I/O控制系统，外围设备</p><p>软件：各种程序和文件，用于指挥计算机系统按指定的要求进行协同工作。 包括系统软件、支撑软件和应用软件。  关键系统软件是：操作系统与语言处理程序。</p><h2 id="计算机硬件系统："><a href="#计算机硬件系统：" class="headerlink" title="计算机硬件系统："></a>计算机硬件系统：</h2><p>中央处理器–运算单元、控制单元；<br>主存储器；<br>外围设备–输出设备、输入设备、存储设备、网络通信设备；<br>这些硬件是靠系统总线连接着相互作用的。</p><p>今天的计算机绝大部分是由 冯诺依曼模型设计的存储程序计算机。</p><ol><li>以运算单元为中心，控制流由指令流产生</li><li>采用存储程序原理，面向主存组织数据流</li><li>主存是按地址访问、线性编址的空间</li><li>指令由操作码和地址码组成</li><li>数据以二进制编码</li></ol><h2 id="存储计算机的结构："><a href="#存储计算机的结构：" class="headerlink" title="存储计算机的结构："></a>存储计算机的结构：</h2><pre><code> &lt;-----控制器|&gt;</code></pre><p>数据程序–&gt;输入设备–&gt;存储器–&gt;输出设备–&gt;计算结果<br>                       |<br>                     运算器</p><h2 id="总线及其组成："><a href="#总线及其组成：" class="headerlink" title="总线及其组成："></a>总线及其组成：</h2><p>总线（Bus）是计算机各种功能部件之间传送信息的公共通信干线，它是CPU、内存、输入输出设备传递信息的公用通道；<br>计算机的各个部件通过总线相连接，外围设备通过相应的接口电路在于总线相连接，从而形成了计算机硬件系统；<br>按照所传输的信息种类，总线包括一组控制线、一组数据线和一组地址线。</p><p>内部总线：用于CPU芯片内部连接各元件；<br>系统总线：用于连接CPU、存储器和各种I/O模块等主要部件；<br>通信总线：用于计算机系统之间通信。</p><h2 id="中央处理器（CPU）"><a href="#中央处理器（CPU）" class="headerlink" title="中央处理器（CPU）"></a>中央处理器（CPU）</h2><p>中央处理器是计算机的运算核心（Core）和控制单元（Control Unit），主要包括：<br>运算逻辑部件：一个或多个运算器；<br>寄存器部件：包括通用寄存器、控制与状态寄存器，以及高速缓冲存储器（Cache）；<br>控制部件：实现各部件间联系的数据、控制及状态的内部总线；负责对指令译码、发出为完成每条指令所要执行操作的控制信号、实现数据输出等功能的部件；</p><h2 id="处理器与寄存器："><a href="#处理器与寄存器：" class="headerlink" title="处理器与寄存器："></a>处理器与寄存器：</h2><p>运算单元、控制单元、内部总线、PC/IR/Flag、MAR/MDR;<br>寄存器、Cache、IOAR/IODR</p><h2 id="CPU："><a href="#CPU：" class="headerlink" title="CPU："></a>CPU：</h2><p>标志寄存器Flag、程序计数器PC、<br>控制单元：指令暂存器IR、指令译码器ID<br>内存地址寄存器MAR、内存数据寄存器MDR<br>     |<br>   主存储器</p><p>存储器的组织层次：层级越小，容量更小，速度更快，价格更高；层级越高，容量更大，速度更慢，价格更低。<br>L0：寄存器<br>L1：L1 Cache（SRAM）<br>L2：L2 Cache（SRAM）<br>L3：L3 Cache（SRAM）<br>L4：主存（DRAM）<br>L5：SSD（本地固态硬盘）<br>L6：本地外存储器（本地硬盘）<br>L7：远程外存储器（分布式文件系统，Web服务器）</p><h2 id="外围设备：输入设备、输出设备、存储设备、网络设备（机机通信设备）"><a href="#外围设备：输入设备、输出设备、存储设备、网络设备（机机通信设备）" class="headerlink" title="外围设备：输入设备、输出设备、存储设备、网络设备（机机通信设备）"></a>外围设备：输入设备、输出设备、存储设备、网络设备（机机通信设备）</h2><p>外围设备控制方式：轮询方式–CPU忙式控制，CPU执行内存数据交换；中断方式–CPU启动外设，外设中断CPU，CPU执行内存数据交换；DMA方式–CPU启动DMA，DMA执行输入输出与内存数据交换，DMA中断CPU。</p><h2 id="计算机软件系统的组成：系统软件、支撑软件、应用软件；"><a href="#计算机软件系统的组成：系统软件、支撑软件、应用软件；" class="headerlink" title="计算机软件系统的组成：系统软件、支撑软件、应用软件；"></a>计算机软件系统的组成：系统软件、支撑软件、应用软件；</h2><h2 id="系统软件：操作系统、实用程序、语言处理程序、数据库管理系统；"><a href="#系统软件：操作系统、实用程序、语言处理程序、数据库管理系统；" class="headerlink" title="系统软件：操作系统、实用程序、语言处理程序、数据库管理系统；"></a>系统软件：操作系统、实用程序、语言处理程序、数据库管理系统；</h2><p>操作系统实施对各种软硬件资源的管理控制<br>实用程序为方便用户所设，如文本编辑等<br>语言处理程序把用汇编语言/该机语言编写的程序，翻译成可执行的及其语言程序；<br>支撑软件：有接口软件、工具软件、环境数据库，支持用户使用计算机的环境，提供开发工具；<br>应用软件：是用户按器需要自行编写的专用程序；</p><h2 id="程序员的计算机系统视图："><a href="#程序员的计算机系统视图：" class="headerlink" title="程序员的计算机系统视图："></a>程序员的计算机系统视图：</h2><p>最开始的计算机是<br>程序员—&gt; 机器指令—-&gt; 计算机硬件系统<br>当操作系统与实用软件的出现扩展机器指令，可以着重于CPU的计算，增加了系统调用，注重再来计算上面；<br>增加了数据库管理系统之后，程序设计；<br>高级语言的形成，使得我们面向目标机器变成了面向目标解决；</p><h2 id="软件开发的不同层次："><a href="#软件开发的不同层次：" class="headerlink" title="软件开发的不同层次："></a>软件开发的不同层次：</h2><p>计算机硬件系统：及其语言<br>操作系统质资源管理：机器语言+广义指令（扩充了硬件资源管理）<br>操作系统之文件系统：机器语言+系统调用（扩充了信息资源管理）<br>数据库管理系统：++数据库语言（扩充了功能更强的信息资源管理）<br>语言处理程序：面向问题的语言</p><h2 id="计算机程序的执行过程："><a href="#计算机程序的执行过程：" class="headerlink" title="计算机程序的执行过程："></a>计算机程序的执行过程：</h2><p>一些高级语言一般会经过转换程序转换成另一种高级语言执行比如我们的第四代语言需要转换成C语言这样的第三代语言高级语言源程序，之后通过编译程序转换成目标代码程序或者通过解释程序编程目标代码程序；我们也可以通过汇编语言源程序通过汇编程序转换成目标代码程序；最后目标代码程序则需经过库函数通过连接程序变为可执行程序；可执行程序是在操作系统中可执行的程序；可执行程序最后装入程序装入内存，在操作系统下进行执行。</p><h2 id="操作平台与操作系统"><a href="#操作平台与操作系统" class="headerlink" title="操作平台与操作系统"></a>操作平台与操作系统</h2><p>任何一台及其都有其操作平台与操作系统；<br>计算机的操作系统：<br>开关标示，按钮控制，亮灯显示；</p><h1 id="Git有很多命令："><a href="#Git有很多命令：" class="headerlink" title="Git有很多命令："></a>Git有很多命令：</h1><p>git init （交给git来管理）<br>git add . （工作区上传到缓存区）<br>git commit -m ‘本次提交的注释信息’  （缓存区上传到仓库）<br>git reset –hard HEAD^  (回滚到上一个版本，一个尖角号就是后退一个版本)<br>git log  (获取当前的版本号和之前的版本)<br>git refolg (看我们真实的一些操作并且返回所有的id号)<br>git reset –hard ID号  (回滚到本ID号所在的版本)<br>git diff  (比较工作区与缓存区的区别)<br>git diff HEAD  (比较工作区与仓库的区别)<br>git diff –cached  (比较缓存区与仓库的区别)<br>git checkout HEAD <file>   (把仓库的代码覆盖到工作区和缓存区，如果写代码写错了，就可以这样啊)<br>git reset HEAD  (把仓库区覆盖缓存区)<br>git checkout – <file>   (缓存区覆盖工作区)</file></file></p><h2 id="多人开发："><a href="#多人开发：" class="headerlink" title="多人开发："></a>多人开发：</h2><p>git branch dev  (新建一个dev分支)<br>git branch    （查看现在分支）<br>git branch -va  (查看远程和本地的所有分支)<br>git checkout dev  (从当前分支改到dev分支上，多人开发一般都会把master分支保护起来，一个人一个分支)<br>git merge dev  (把在dev上开发的代码合并到master分支上，此功能应该先回到master分支上，这样就是合并dev到master分支上)<br>要是dev分支上与我们master分支上互相都有不同，也就是master是别人在你上传到master上之前提交修改了，所以合并你的dev的时候就会出现冲突，冲突合并会出现HEAD上与你不同的内容，和你dev与master不同的内容之间会有分割线，所以你就要手动的进行合并。<br>git checkout remotes/origin/dev  (下载远程dev分支上的内容到本地)<br>多人开发首先应该拉取代码：<br>git pull origin master  (拉取远程代码到本地)<br>git push origin master:master  (把本地上的代码处理完冲突在推送到远程上)<br>一般公司里你自己并不能提交到master分支上，所以你应该提交一个提交请求并且@一下这个项目的主管（前端主管和后端主管），主管审核无误后，主管才会推送到master分支上。</p><h2 id="github简单使用："><a href="#github简单使用：" class="headerlink" title="github简单使用："></a>github简单使用：</h2><p>1）git  init<br>初始化一个git<br>2) vim .gitignore 新增以及编写这个文件<br>node_modules/<br>意思就是上传的时候忽略这个文件夹以及里面的内容，因为我上传的是nodejs项目文件，所以不用把node_modules上传上去<br>3）git add .    添加代码到git<br>4)  git commit -m ‘第一个版本’<br>版本的备注信息<br>5) git remote add origin <a href="https://github.com/jasonzhangdong/auth2.0test.git">https://github.com/jasonzhangdong/auth2.0test.git</a><br>将代码关联到github上面，后面的url就是第二部拷贝下来的那个路径<br>6）git push -u origin master<br>     将代码推送上去</p><h2 id="git一些问题："><a href="#git一些问题：" class="headerlink" title="git一些问题："></a>git一些问题：</h2><p>问题描述：<br>在使用gulp当中，自动生成的node_modules文件夹，因为文件目录层级太深，无法系统删除，用360粉碎工具也报错<br>解决方法：<br>使用npm中的插件rimraf，专门用于删除的模块插件<br>　　1、安装：npm install -g rimraf（全局安装）<br>　　2、使用：先定位目标文件夹的父级目录，然后命令行输入rimraf <strong><em>（</em></strong>为需要删除的文件夹名称）  eg：rimraf node_modules</p><h1 id="MarkDown的简要规则："><a href="#MarkDown的简要规则：" class="headerlink" title="MarkDown的简要规则："></a>MarkDown的简要规则：</h1><p>标题是每篇文章都需要也是最常用的格式，在 Markdown 中，如果一段文字被定义为标题，只要在这段文字前加 # 号即可。<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure></p><p>熟悉 HTML 的同学肯定知道有序列表与无序列表的区别，在 Markdown 下，列表的显示只需要在文字前加上 - 或 * 即可变为无序列表，有序列表则直接在文字前加1. 2. 3. 符号要和文字之间加上一个字符的空格。</p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>如果你需要引用一小段别处的句子，那么就要用引用的格式。只需要在文本前加入 &gt; 这种尖括号（大于号）即可，要注意符号和文本之间的空格。</p><h2 id="图片与链接"><a href="#图片与链接" class="headerlink" title="图片与链接:"></a>图片与链接:</h2><p>插入链接与插入图片的语法很像，区别在一个 !号<br>图片为：<img src alt>{ImgCap}{/ImgCap}<br>链接为：<a href></a><br>插入图片的地址需要图床，这里推荐围脖图床修复计划 与 CloudApp 的服务，生成URL地址即可。<br>例子：<br>插入链接：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">Baidu</span>](<span class="link">https://baidu.com</span>)</span><br><span class="line">插入图片：</span><br><span class="line">![<span class="string">Mou icon</span>](<span class="link">https://mouapp.com/Mou_128.png</span>)</span><br></pre></td></tr></table></figure></p><p>展示效果如下：<br><a href="https://baidu.com">Baidu</a><br>插入图片：<br><img src="https://mouapp.com/Mou_128.png" alt="Mou icon"></p><h2 id="粗体与斜体"><a href="#粗体与斜体" class="headerlink" title="粗体与斜体:"></a>粗体与斜体:</h2><p>Markdown 的粗体和斜体也非常简单，用两个 <em> 包含一段文本就是粗体的语法，用一个 </em> 包含一段文本就是斜体的语法。</p><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>表格是我觉得 Markdown 比较累人的地方，例子如下：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="params">| Tables        |</span> Are           <span class="params">| Cool  |</span></span><br><span class="line"></span><br><span class="line"><span class="params">| ------------- |</span><span class="symbol">:-------------</span><span class="symbol">:|</span> -----<span class="symbol">:|</span></span><br><span class="line"></span><br><span class="line"><span class="params">| col 3 is      |</span> right-aligned <span class="params">| $1600 |</span></span><br><span class="line"></span><br><span class="line"><span class="params">| col 2 is      |</span> centered      <span class="params">|   $12 |</span></span><br><span class="line"></span><br><span class="line"><span class="params">| zebra stripes |</span> are neat      <span class="params">|    $1 |</span></span><br></pre></td></tr></table></figure></p><h2 id="代码框"><a href="#代码框" class="headerlink" title="代码框:"></a>代码框:</h2><p>如果你是个程序猿，需要在文章里优雅的引用代码框，在 Markdown下实现也非常简单，只需要用两个 ` 把中间的代码包裹起来。使用 tab 键即可缩进。</p><p>分割线<br>分割线的语法只需要三个 * 号.<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="emphasis">***</span></span><br><span class="line"><span class="emphasis">***</span></span><br><span class="line"><span class="emphasis">***</span></span><br><span class="line"><span class="emphasis">***</span></span><br></pre></td></tr></table></figure></p><p>效果展示如下：</p><hr><hr><hr><hr><p>这是四条分割线吗？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt; 计算机发展+Git简单使用+markdown简单语法：&lt;/strong&gt; &lt;excerpt in index | 首页摘要&gt;&lt;/excerpt&gt;&lt;/p&gt;
&lt;h1 id=&quot;计算机的发展历程：&quot;&gt;&lt;a href=&quot;#计算机的发展历程：&quot; class=&quot;head
      
    
    </summary>
    
      <category term="资源分享" scheme="https://indexcode.cn/categories/%E8%B5%84%E6%BA%90%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="认知提升" scheme="https://indexcode.cn/tags/%E8%AE%A4%E7%9F%A5%E6%8F%90%E5%8D%87/"/>
    
  </entry>
  
</feed>
